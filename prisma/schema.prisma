// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // For direct access to the database, e.g., for migrations
}



model User {
  id            String             @id @default(uuid())
  clerkUserId   String             @unique // clerk user id
  email         String             @unique
  name          String?
  imageUrl      String?
  phone         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  role          UserRole           @default(USER)
  savedCars     UserSavedCar[]
  testDrives    TestDriveBooking[]
}

enum UserRole {
  USER
  ADMIN
}

model Car {
  id                String             @id @default(uuid())
  brand             String
  model             String
  year              Int
  price             Decimal            @db.Decimal(10, 2)
  mileage           String
  color             String
  fuelType          String
  transmission      String
  bodyType          String
  seats             Int?
  description       String
  status            CarStatus          @default(AVAILABLE)
  featured          Boolean            @default(false)
  images            String[]           // Array of Supabase storage URLs
  savedBy           UserSavedCar[]
  testDriveBookings TestDriveBooking[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([brand, model])
  @@index([bodyType])
  @@index([price])
  @@index([year])
  @@index([status])
  @@index([fuelType])
  @@index([featured])
}

enum CarStatus {
  AVAILABLE
  UNAVAILABLE
  SOLD
}

model DealershipInfo {
  id           String        @id @default(uuid())
  name         String        @default("Autora Motors")
  address      String        @default("69 Car Street, MH,IN") 
  phone        String        @default("+91 12345 67890")
  email        String        @default("contact@autora.com")
  workingHours WorkingHour[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkingHour {
  id             String       @id @default(uuid())
  dealershipId   String
  dealership     DealershipInfo   @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
  dayOfWeek      DayOfWeek
  openTime       String       // Format: "HH:MM" (24-hour)
  closeTime      String       // Format: "HH:MM" (24-hour)
  isOpen         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([dealershipId, dayOfWeek])
  @@index([dealershipId])
  @@index([dayOfWeek])
  @@index([isOpen])
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model UserSavedCar {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  carId     String
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  savedAt   DateTime @default(now())

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
}

model TestDriveBooking {
  id            String        @id @default(uuid())
  carId         String
  car           Car           @relation(fields: [carId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  bookingDate   DateTime      @db.Date
  startTime     String        // Format: "HH:MM" (24-hour)
  endTime       String        // Format: "HH:MM" (24-hour)
  status        BookingStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([carId])
  @@index([userId])
  @@index([bookingDate])
  @@index([status])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}