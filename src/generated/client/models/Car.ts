
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Car` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Car
 * 
 */
export type CarModel = runtime.Types.Result.DefaultSelection<Prisma.$CarPayload>

export type AggregateCar = {
  _count: CarCountAggregateOutputType | null
  _avg: CarAvgAggregateOutputType | null
  _sum: CarSumAggregateOutputType | null
  _min: CarMinAggregateOutputType | null
  _max: CarMaxAggregateOutputType | null
}

export type CarAvgAggregateOutputType = {
  year: number | null
  price: runtime.Decimal | null
  mileage: number | null
  seats: number | null
}

export type CarSumAggregateOutputType = {
  year: number | null
  price: runtime.Decimal | null
  mileage: number | null
  seats: number | null
}

export type CarMinAggregateOutputType = {
  id: string | null
  brand: string | null
  model: string | null
  year: number | null
  price: runtime.Decimal | null
  mileage: number | null
  color: string | null
  fuelType: string | null
  transmission: string | null
  bodyType: string | null
  seats: number | null
  description: string | null
  status: $Enums.CarStatus | null
  featured: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CarMaxAggregateOutputType = {
  id: string | null
  brand: string | null
  model: string | null
  year: number | null
  price: runtime.Decimal | null
  mileage: number | null
  color: string | null
  fuelType: string | null
  transmission: string | null
  bodyType: string | null
  seats: number | null
  description: string | null
  status: $Enums.CarStatus | null
  featured: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CarCountAggregateOutputType = {
  id: number
  brand: number
  model: number
  year: number
  price: number
  mileage: number
  color: number
  fuelType: number
  transmission: number
  bodyType: number
  seats: number
  description: number
  status: number
  featured: number
  images: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CarAvgAggregateInputType = {
  year?: true
  price?: true
  mileage?: true
  seats?: true
}

export type CarSumAggregateInputType = {
  year?: true
  price?: true
  mileage?: true
  seats?: true
}

export type CarMinAggregateInputType = {
  id?: true
  brand?: true
  model?: true
  year?: true
  price?: true
  mileage?: true
  color?: true
  fuelType?: true
  transmission?: true
  bodyType?: true
  seats?: true
  description?: true
  status?: true
  featured?: true
  createdAt?: true
  updatedAt?: true
}

export type CarMaxAggregateInputType = {
  id?: true
  brand?: true
  model?: true
  year?: true
  price?: true
  mileage?: true
  color?: true
  fuelType?: true
  transmission?: true
  bodyType?: true
  seats?: true
  description?: true
  status?: true
  featured?: true
  createdAt?: true
  updatedAt?: true
}

export type CarCountAggregateInputType = {
  id?: true
  brand?: true
  model?: true
  year?: true
  price?: true
  mileage?: true
  color?: true
  fuelType?: true
  transmission?: true
  bodyType?: true
  seats?: true
  description?: true
  status?: true
  featured?: true
  images?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CarAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Car to aggregate.
   */
  where?: Prisma.CarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cars to fetch.
   */
  orderBy?: Prisma.CarOrderByWithRelationInput | Prisma.CarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Cars
  **/
  _count?: true | CarCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CarAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CarSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CarMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CarMaxAggregateInputType
}

export type GetCarAggregateType<T extends CarAggregateArgs> = {
      [P in keyof T & keyof AggregateCar]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCar[P]>
    : Prisma.GetScalarType<T[P], AggregateCar[P]>
}




export type CarGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CarWhereInput
  orderBy?: Prisma.CarOrderByWithAggregationInput | Prisma.CarOrderByWithAggregationInput[]
  by: Prisma.CarScalarFieldEnum[] | Prisma.CarScalarFieldEnum
  having?: Prisma.CarScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CarCountAggregateInputType | true
  _avg?: CarAvgAggregateInputType
  _sum?: CarSumAggregateInputType
  _min?: CarMinAggregateInputType
  _max?: CarMaxAggregateInputType
}

export type CarGroupByOutputType = {
  id: string
  brand: string
  model: string
  year: number
  price: runtime.Decimal
  mileage: number
  color: string
  fuelType: string
  transmission: string
  bodyType: string
  seats: number | null
  description: string
  status: $Enums.CarStatus
  featured: boolean
  images: string[]
  createdAt: Date
  updatedAt: Date
  _count: CarCountAggregateOutputType | null
  _avg: CarAvgAggregateOutputType | null
  _sum: CarSumAggregateOutputType | null
  _min: CarMinAggregateOutputType | null
  _max: CarMaxAggregateOutputType | null
}

type GetCarGroupByPayload<T extends CarGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CarGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CarGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CarGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CarGroupByOutputType[P]>
      }
    >
  > 



export type CarWhereInput = {
  AND?: Prisma.CarWhereInput | Prisma.CarWhereInput[]
  OR?: Prisma.CarWhereInput[]
  NOT?: Prisma.CarWhereInput | Prisma.CarWhereInput[]
  id?: Prisma.StringFilter<"Car"> | string
  brand?: Prisma.StringFilter<"Car"> | string
  model?: Prisma.StringFilter<"Car"> | string
  year?: Prisma.IntFilter<"Car"> | number
  price?: Prisma.DecimalFilter<"Car"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFilter<"Car"> | number
  color?: Prisma.StringFilter<"Car"> | string
  fuelType?: Prisma.StringFilter<"Car"> | string
  transmission?: Prisma.StringFilter<"Car"> | string
  bodyType?: Prisma.StringFilter<"Car"> | string
  seats?: Prisma.IntNullableFilter<"Car"> | number | null
  description?: Prisma.StringFilter<"Car"> | string
  status?: Prisma.EnumCarStatusFilter<"Car"> | $Enums.CarStatus
  featured?: Prisma.BoolFilter<"Car"> | boolean
  images?: Prisma.StringNullableListFilter<"Car">
  createdAt?: Prisma.DateTimeFilter<"Car"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Car"> | Date | string
  savedBy?: Prisma.UserSavedCarListRelationFilter
  testDriveBookings?: Prisma.TestDriveBookingListRelationFilter
}

export type CarOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brand?: Prisma.SortOrder
  model?: Prisma.SortOrder
  year?: Prisma.SortOrder
  price?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  color?: Prisma.SortOrder
  fuelType?: Prisma.SortOrder
  transmission?: Prisma.SortOrder
  bodyType?: Prisma.SortOrder
  seats?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  images?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  savedBy?: Prisma.UserSavedCarOrderByRelationAggregateInput
  testDriveBookings?: Prisma.TestDriveBookingOrderByRelationAggregateInput
}

export type CarWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CarWhereInput | Prisma.CarWhereInput[]
  OR?: Prisma.CarWhereInput[]
  NOT?: Prisma.CarWhereInput | Prisma.CarWhereInput[]
  brand?: Prisma.StringFilter<"Car"> | string
  model?: Prisma.StringFilter<"Car"> | string
  year?: Prisma.IntFilter<"Car"> | number
  price?: Prisma.DecimalFilter<"Car"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFilter<"Car"> | number
  color?: Prisma.StringFilter<"Car"> | string
  fuelType?: Prisma.StringFilter<"Car"> | string
  transmission?: Prisma.StringFilter<"Car"> | string
  bodyType?: Prisma.StringFilter<"Car"> | string
  seats?: Prisma.IntNullableFilter<"Car"> | number | null
  description?: Prisma.StringFilter<"Car"> | string
  status?: Prisma.EnumCarStatusFilter<"Car"> | $Enums.CarStatus
  featured?: Prisma.BoolFilter<"Car"> | boolean
  images?: Prisma.StringNullableListFilter<"Car">
  createdAt?: Prisma.DateTimeFilter<"Car"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Car"> | Date | string
  savedBy?: Prisma.UserSavedCarListRelationFilter
  testDriveBookings?: Prisma.TestDriveBookingListRelationFilter
}, "id">

export type CarOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brand?: Prisma.SortOrder
  model?: Prisma.SortOrder
  year?: Prisma.SortOrder
  price?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  color?: Prisma.SortOrder
  fuelType?: Prisma.SortOrder
  transmission?: Prisma.SortOrder
  bodyType?: Prisma.SortOrder
  seats?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  images?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CarCountOrderByAggregateInput
  _avg?: Prisma.CarAvgOrderByAggregateInput
  _max?: Prisma.CarMaxOrderByAggregateInput
  _min?: Prisma.CarMinOrderByAggregateInput
  _sum?: Prisma.CarSumOrderByAggregateInput
}

export type CarScalarWhereWithAggregatesInput = {
  AND?: Prisma.CarScalarWhereWithAggregatesInput | Prisma.CarScalarWhereWithAggregatesInput[]
  OR?: Prisma.CarScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CarScalarWhereWithAggregatesInput | Prisma.CarScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Car"> | string
  brand?: Prisma.StringWithAggregatesFilter<"Car"> | string
  model?: Prisma.StringWithAggregatesFilter<"Car"> | string
  year?: Prisma.IntWithAggregatesFilter<"Car"> | number
  price?: Prisma.DecimalWithAggregatesFilter<"Car"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntWithAggregatesFilter<"Car"> | number
  color?: Prisma.StringWithAggregatesFilter<"Car"> | string
  fuelType?: Prisma.StringWithAggregatesFilter<"Car"> | string
  transmission?: Prisma.StringWithAggregatesFilter<"Car"> | string
  bodyType?: Prisma.StringWithAggregatesFilter<"Car"> | string
  seats?: Prisma.IntNullableWithAggregatesFilter<"Car"> | number | null
  description?: Prisma.StringWithAggregatesFilter<"Car"> | string
  status?: Prisma.EnumCarStatusWithAggregatesFilter<"Car"> | $Enums.CarStatus
  featured?: Prisma.BoolWithAggregatesFilter<"Car"> | boolean
  images?: Prisma.StringNullableListFilter<"Car">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Car"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Car"> | Date | string
}

export type CarCreateInput = {
  id?: string
  brand: string
  model: string
  year: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage: number
  color: string
  fuelType: string
  transmission: string
  bodyType: string
  seats?: number | null
  description: string
  status?: $Enums.CarStatus
  featured?: boolean
  images?: Prisma.CarCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  savedBy?: Prisma.UserSavedCarCreateNestedManyWithoutCarInput
  testDriveBookings?: Prisma.TestDriveBookingCreateNestedManyWithoutCarInput
}

export type CarUncheckedCreateInput = {
  id?: string
  brand: string
  model: string
  year: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage: number
  color: string
  fuelType: string
  transmission: string
  bodyType: string
  seats?: number | null
  description: string
  status?: $Enums.CarStatus
  featured?: boolean
  images?: Prisma.CarCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  savedBy?: Prisma.UserSavedCarUncheckedCreateNestedManyWithoutCarInput
  testDriveBookings?: Prisma.TestDriveBookingUncheckedCreateNestedManyWithoutCarInput
}

export type CarUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFieldUpdateOperationsInput | number
  color?: Prisma.StringFieldUpdateOperationsInput | string
  fuelType?: Prisma.StringFieldUpdateOperationsInput | string
  transmission?: Prisma.StringFieldUpdateOperationsInput | string
  bodyType?: Prisma.StringFieldUpdateOperationsInput | string
  seats?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCarStatusFieldUpdateOperationsInput | $Enums.CarStatus
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  images?: Prisma.CarUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  savedBy?: Prisma.UserSavedCarUpdateManyWithoutCarNestedInput
  testDriveBookings?: Prisma.TestDriveBookingUpdateManyWithoutCarNestedInput
}

export type CarUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFieldUpdateOperationsInput | number
  color?: Prisma.StringFieldUpdateOperationsInput | string
  fuelType?: Prisma.StringFieldUpdateOperationsInput | string
  transmission?: Prisma.StringFieldUpdateOperationsInput | string
  bodyType?: Prisma.StringFieldUpdateOperationsInput | string
  seats?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCarStatusFieldUpdateOperationsInput | $Enums.CarStatus
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  images?: Prisma.CarUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  savedBy?: Prisma.UserSavedCarUncheckedUpdateManyWithoutCarNestedInput
  testDriveBookings?: Prisma.TestDriveBookingUncheckedUpdateManyWithoutCarNestedInput
}

export type CarCreateManyInput = {
  id?: string
  brand: string
  model: string
  year: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage: number
  color: string
  fuelType: string
  transmission: string
  bodyType: string
  seats?: number | null
  description: string
  status?: $Enums.CarStatus
  featured?: boolean
  images?: Prisma.CarCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CarUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFieldUpdateOperationsInput | number
  color?: Prisma.StringFieldUpdateOperationsInput | string
  fuelType?: Prisma.StringFieldUpdateOperationsInput | string
  transmission?: Prisma.StringFieldUpdateOperationsInput | string
  bodyType?: Prisma.StringFieldUpdateOperationsInput | string
  seats?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCarStatusFieldUpdateOperationsInput | $Enums.CarStatus
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  images?: Prisma.CarUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CarUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFieldUpdateOperationsInput | number
  color?: Prisma.StringFieldUpdateOperationsInput | string
  fuelType?: Prisma.StringFieldUpdateOperationsInput | string
  transmission?: Prisma.StringFieldUpdateOperationsInput | string
  bodyType?: Prisma.StringFieldUpdateOperationsInput | string
  seats?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCarStatusFieldUpdateOperationsInput | $Enums.CarStatus
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  images?: Prisma.CarUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type CarCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand?: Prisma.SortOrder
  model?: Prisma.SortOrder
  year?: Prisma.SortOrder
  price?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  color?: Prisma.SortOrder
  fuelType?: Prisma.SortOrder
  transmission?: Prisma.SortOrder
  bodyType?: Prisma.SortOrder
  seats?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  images?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CarAvgOrderByAggregateInput = {
  year?: Prisma.SortOrder
  price?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  seats?: Prisma.SortOrder
}

export type CarMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand?: Prisma.SortOrder
  model?: Prisma.SortOrder
  year?: Prisma.SortOrder
  price?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  color?: Prisma.SortOrder
  fuelType?: Prisma.SortOrder
  transmission?: Prisma.SortOrder
  bodyType?: Prisma.SortOrder
  seats?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CarMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand?: Prisma.SortOrder
  model?: Prisma.SortOrder
  year?: Prisma.SortOrder
  price?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  color?: Prisma.SortOrder
  fuelType?: Prisma.SortOrder
  transmission?: Prisma.SortOrder
  bodyType?: Prisma.SortOrder
  seats?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CarSumOrderByAggregateInput = {
  year?: Prisma.SortOrder
  price?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
  seats?: Prisma.SortOrder
}

export type CarScalarRelationFilter = {
  is?: Prisma.CarWhereInput
  isNot?: Prisma.CarWhereInput
}

export type CarCreateimagesInput = {
  set: string[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumCarStatusFieldUpdateOperationsInput = {
  set?: $Enums.CarStatus
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type CarUpdateimagesInput = {
  set?: string[]
  push?: string | string[]
}

export type CarCreateNestedOneWithoutSavedByInput = {
  create?: Prisma.XOR<Prisma.CarCreateWithoutSavedByInput, Prisma.CarUncheckedCreateWithoutSavedByInput>
  connectOrCreate?: Prisma.CarCreateOrConnectWithoutSavedByInput
  connect?: Prisma.CarWhereUniqueInput
}

export type CarUpdateOneRequiredWithoutSavedByNestedInput = {
  create?: Prisma.XOR<Prisma.CarCreateWithoutSavedByInput, Prisma.CarUncheckedCreateWithoutSavedByInput>
  connectOrCreate?: Prisma.CarCreateOrConnectWithoutSavedByInput
  upsert?: Prisma.CarUpsertWithoutSavedByInput
  connect?: Prisma.CarWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CarUpdateToOneWithWhereWithoutSavedByInput, Prisma.CarUpdateWithoutSavedByInput>, Prisma.CarUncheckedUpdateWithoutSavedByInput>
}

export type CarCreateNestedOneWithoutTestDriveBookingsInput = {
  create?: Prisma.XOR<Prisma.CarCreateWithoutTestDriveBookingsInput, Prisma.CarUncheckedCreateWithoutTestDriveBookingsInput>
  connectOrCreate?: Prisma.CarCreateOrConnectWithoutTestDriveBookingsInput
  connect?: Prisma.CarWhereUniqueInput
}

export type CarUpdateOneRequiredWithoutTestDriveBookingsNestedInput = {
  create?: Prisma.XOR<Prisma.CarCreateWithoutTestDriveBookingsInput, Prisma.CarUncheckedCreateWithoutTestDriveBookingsInput>
  connectOrCreate?: Prisma.CarCreateOrConnectWithoutTestDriveBookingsInput
  upsert?: Prisma.CarUpsertWithoutTestDriveBookingsInput
  connect?: Prisma.CarWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CarUpdateToOneWithWhereWithoutTestDriveBookingsInput, Prisma.CarUpdateWithoutTestDriveBookingsInput>, Prisma.CarUncheckedUpdateWithoutTestDriveBookingsInput>
}

export type CarCreateWithoutSavedByInput = {
  id?: string
  brand: string
  model: string
  year: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage: number
  color: string
  fuelType: string
  transmission: string
  bodyType: string
  seats?: number | null
  description: string
  status?: $Enums.CarStatus
  featured?: boolean
  images?: Prisma.CarCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  testDriveBookings?: Prisma.TestDriveBookingCreateNestedManyWithoutCarInput
}

export type CarUncheckedCreateWithoutSavedByInput = {
  id?: string
  brand: string
  model: string
  year: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage: number
  color: string
  fuelType: string
  transmission: string
  bodyType: string
  seats?: number | null
  description: string
  status?: $Enums.CarStatus
  featured?: boolean
  images?: Prisma.CarCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  testDriveBookings?: Prisma.TestDriveBookingUncheckedCreateNestedManyWithoutCarInput
}

export type CarCreateOrConnectWithoutSavedByInput = {
  where: Prisma.CarWhereUniqueInput
  create: Prisma.XOR<Prisma.CarCreateWithoutSavedByInput, Prisma.CarUncheckedCreateWithoutSavedByInput>
}

export type CarUpsertWithoutSavedByInput = {
  update: Prisma.XOR<Prisma.CarUpdateWithoutSavedByInput, Prisma.CarUncheckedUpdateWithoutSavedByInput>
  create: Prisma.XOR<Prisma.CarCreateWithoutSavedByInput, Prisma.CarUncheckedCreateWithoutSavedByInput>
  where?: Prisma.CarWhereInput
}

export type CarUpdateToOneWithWhereWithoutSavedByInput = {
  where?: Prisma.CarWhereInput
  data: Prisma.XOR<Prisma.CarUpdateWithoutSavedByInput, Prisma.CarUncheckedUpdateWithoutSavedByInput>
}

export type CarUpdateWithoutSavedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFieldUpdateOperationsInput | number
  color?: Prisma.StringFieldUpdateOperationsInput | string
  fuelType?: Prisma.StringFieldUpdateOperationsInput | string
  transmission?: Prisma.StringFieldUpdateOperationsInput | string
  bodyType?: Prisma.StringFieldUpdateOperationsInput | string
  seats?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCarStatusFieldUpdateOperationsInput | $Enums.CarStatus
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  images?: Prisma.CarUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testDriveBookings?: Prisma.TestDriveBookingUpdateManyWithoutCarNestedInput
}

export type CarUncheckedUpdateWithoutSavedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFieldUpdateOperationsInput | number
  color?: Prisma.StringFieldUpdateOperationsInput | string
  fuelType?: Prisma.StringFieldUpdateOperationsInput | string
  transmission?: Prisma.StringFieldUpdateOperationsInput | string
  bodyType?: Prisma.StringFieldUpdateOperationsInput | string
  seats?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCarStatusFieldUpdateOperationsInput | $Enums.CarStatus
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  images?: Prisma.CarUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  testDriveBookings?: Prisma.TestDriveBookingUncheckedUpdateManyWithoutCarNestedInput
}

export type CarCreateWithoutTestDriveBookingsInput = {
  id?: string
  brand: string
  model: string
  year: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage: number
  color: string
  fuelType: string
  transmission: string
  bodyType: string
  seats?: number | null
  description: string
  status?: $Enums.CarStatus
  featured?: boolean
  images?: Prisma.CarCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  savedBy?: Prisma.UserSavedCarCreateNestedManyWithoutCarInput
}

export type CarUncheckedCreateWithoutTestDriveBookingsInput = {
  id?: string
  brand: string
  model: string
  year: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage: number
  color: string
  fuelType: string
  transmission: string
  bodyType: string
  seats?: number | null
  description: string
  status?: $Enums.CarStatus
  featured?: boolean
  images?: Prisma.CarCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  savedBy?: Prisma.UserSavedCarUncheckedCreateNestedManyWithoutCarInput
}

export type CarCreateOrConnectWithoutTestDriveBookingsInput = {
  where: Prisma.CarWhereUniqueInput
  create: Prisma.XOR<Prisma.CarCreateWithoutTestDriveBookingsInput, Prisma.CarUncheckedCreateWithoutTestDriveBookingsInput>
}

export type CarUpsertWithoutTestDriveBookingsInput = {
  update: Prisma.XOR<Prisma.CarUpdateWithoutTestDriveBookingsInput, Prisma.CarUncheckedUpdateWithoutTestDriveBookingsInput>
  create: Prisma.XOR<Prisma.CarCreateWithoutTestDriveBookingsInput, Prisma.CarUncheckedCreateWithoutTestDriveBookingsInput>
  where?: Prisma.CarWhereInput
}

export type CarUpdateToOneWithWhereWithoutTestDriveBookingsInput = {
  where?: Prisma.CarWhereInput
  data: Prisma.XOR<Prisma.CarUpdateWithoutTestDriveBookingsInput, Prisma.CarUncheckedUpdateWithoutTestDriveBookingsInput>
}

export type CarUpdateWithoutTestDriveBookingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFieldUpdateOperationsInput | number
  color?: Prisma.StringFieldUpdateOperationsInput | string
  fuelType?: Prisma.StringFieldUpdateOperationsInput | string
  transmission?: Prisma.StringFieldUpdateOperationsInput | string
  bodyType?: Prisma.StringFieldUpdateOperationsInput | string
  seats?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCarStatusFieldUpdateOperationsInput | $Enums.CarStatus
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  images?: Prisma.CarUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  savedBy?: Prisma.UserSavedCarUpdateManyWithoutCarNestedInput
}

export type CarUncheckedUpdateWithoutTestDriveBookingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  mileage?: Prisma.IntFieldUpdateOperationsInput | number
  color?: Prisma.StringFieldUpdateOperationsInput | string
  fuelType?: Prisma.StringFieldUpdateOperationsInput | string
  transmission?: Prisma.StringFieldUpdateOperationsInput | string
  bodyType?: Prisma.StringFieldUpdateOperationsInput | string
  seats?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCarStatusFieldUpdateOperationsInput | $Enums.CarStatus
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  images?: Prisma.CarUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  savedBy?: Prisma.UserSavedCarUncheckedUpdateManyWithoutCarNestedInput
}


/**
 * Count Type CarCountOutputType
 */

export type CarCountOutputType = {
  savedBy: number
  testDriveBookings: number
}

export type CarCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  savedBy?: boolean | CarCountOutputTypeCountSavedByArgs
  testDriveBookings?: boolean | CarCountOutputTypeCountTestDriveBookingsArgs
}

/**
 * CarCountOutputType without action
 */
export type CarCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CarCountOutputType
   */
  select?: Prisma.CarCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CarCountOutputType without action
 */
export type CarCountOutputTypeCountSavedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserSavedCarWhereInput
}

/**
 * CarCountOutputType without action
 */
export type CarCountOutputTypeCountTestDriveBookingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TestDriveBookingWhereInput
}


export type CarSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand?: boolean
  model?: boolean
  year?: boolean
  price?: boolean
  mileage?: boolean
  color?: boolean
  fuelType?: boolean
  transmission?: boolean
  bodyType?: boolean
  seats?: boolean
  description?: boolean
  status?: boolean
  featured?: boolean
  images?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  savedBy?: boolean | Prisma.Car$savedByArgs<ExtArgs>
  testDriveBookings?: boolean | Prisma.Car$testDriveBookingsArgs<ExtArgs>
  _count?: boolean | Prisma.CarCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["car"]>

export type CarSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand?: boolean
  model?: boolean
  year?: boolean
  price?: boolean
  mileage?: boolean
  color?: boolean
  fuelType?: boolean
  transmission?: boolean
  bodyType?: boolean
  seats?: boolean
  description?: boolean
  status?: boolean
  featured?: boolean
  images?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["car"]>

export type CarSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand?: boolean
  model?: boolean
  year?: boolean
  price?: boolean
  mileage?: boolean
  color?: boolean
  fuelType?: boolean
  transmission?: boolean
  bodyType?: boolean
  seats?: boolean
  description?: boolean
  status?: boolean
  featured?: boolean
  images?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["car"]>

export type CarSelectScalar = {
  id?: boolean
  brand?: boolean
  model?: boolean
  year?: boolean
  price?: boolean
  mileage?: boolean
  color?: boolean
  fuelType?: boolean
  transmission?: boolean
  bodyType?: boolean
  seats?: boolean
  description?: boolean
  status?: boolean
  featured?: boolean
  images?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CarOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brand" | "model" | "year" | "price" | "mileage" | "color" | "fuelType" | "transmission" | "bodyType" | "seats" | "description" | "status" | "featured" | "images" | "createdAt" | "updatedAt", ExtArgs["result"]["car"]>
export type CarInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  savedBy?: boolean | Prisma.Car$savedByArgs<ExtArgs>
  testDriveBookings?: boolean | Prisma.Car$testDriveBookingsArgs<ExtArgs>
  _count?: boolean | Prisma.CarCountOutputTypeDefaultArgs<ExtArgs>
}
export type CarIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type CarIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $CarPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Car"
  objects: {
    savedBy: Prisma.$UserSavedCarPayload<ExtArgs>[]
    testDriveBookings: Prisma.$TestDriveBookingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    brand: string
    model: string
    year: number
    price: runtime.Decimal
    mileage: number
    color: string
    fuelType: string
    transmission: string
    bodyType: string
    seats: number | null
    description: string
    status: $Enums.CarStatus
    featured: boolean
    images: string[]
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["car"]>
  composites: {}
}

export type CarGetPayload<S extends boolean | null | undefined | CarDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CarPayload, S>

export type CarCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CarCountAggregateInputType | true
  }

export interface CarDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Car'], meta: { name: 'Car' } }
  /**
   * Find zero or one Car that matches the filter.
   * @param {CarFindUniqueArgs} args - Arguments to find a Car
   * @example
   * // Get one Car
   * const car = await prisma.car.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CarFindUniqueArgs>(args: Prisma.SelectSubset<T, CarFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Car that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CarFindUniqueOrThrowArgs} args - Arguments to find a Car
   * @example
   * // Get one Car
   * const car = await prisma.car.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CarFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CarFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Car that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarFindFirstArgs} args - Arguments to find a Car
   * @example
   * // Get one Car
   * const car = await prisma.car.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CarFindFirstArgs>(args?: Prisma.SelectSubset<T, CarFindFirstArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Car that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarFindFirstOrThrowArgs} args - Arguments to find a Car
   * @example
   * // Get one Car
   * const car = await prisma.car.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CarFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CarFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Cars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Cars
   * const cars = await prisma.car.findMany()
   * 
   * // Get first 10 Cars
   * const cars = await prisma.car.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const carWithIdOnly = await prisma.car.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CarFindManyArgs>(args?: Prisma.SelectSubset<T, CarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Car.
   * @param {CarCreateArgs} args - Arguments to create a Car.
   * @example
   * // Create one Car
   * const Car = await prisma.car.create({
   *   data: {
   *     // ... data to create a Car
   *   }
   * })
   * 
   */
  create<T extends CarCreateArgs>(args: Prisma.SelectSubset<T, CarCreateArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Cars.
   * @param {CarCreateManyArgs} args - Arguments to create many Cars.
   * @example
   * // Create many Cars
   * const car = await prisma.car.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CarCreateManyArgs>(args?: Prisma.SelectSubset<T, CarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Cars and returns the data saved in the database.
   * @param {CarCreateManyAndReturnArgs} args - Arguments to create many Cars.
   * @example
   * // Create many Cars
   * const car = await prisma.car.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Cars and only return the `id`
   * const carWithIdOnly = await prisma.car.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CarCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Car.
   * @param {CarDeleteArgs} args - Arguments to delete one Car.
   * @example
   * // Delete one Car
   * const Car = await prisma.car.delete({
   *   where: {
   *     // ... filter to delete one Car
   *   }
   * })
   * 
   */
  delete<T extends CarDeleteArgs>(args: Prisma.SelectSubset<T, CarDeleteArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Car.
   * @param {CarUpdateArgs} args - Arguments to update one Car.
   * @example
   * // Update one Car
   * const car = await prisma.car.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CarUpdateArgs>(args: Prisma.SelectSubset<T, CarUpdateArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Cars.
   * @param {CarDeleteManyArgs} args - Arguments to filter Cars to delete.
   * @example
   * // Delete a few Cars
   * const { count } = await prisma.car.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CarDeleteManyArgs>(args?: Prisma.SelectSubset<T, CarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Cars
   * const car = await prisma.car.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CarUpdateManyArgs>(args: Prisma.SelectSubset<T, CarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cars and returns the data updated in the database.
   * @param {CarUpdateManyAndReturnArgs} args - Arguments to update many Cars.
   * @example
   * // Update many Cars
   * const car = await prisma.car.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Cars and only return the `id`
   * const carWithIdOnly = await prisma.car.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CarUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Car.
   * @param {CarUpsertArgs} args - Arguments to update or create a Car.
   * @example
   * // Update or create a Car
   * const car = await prisma.car.upsert({
   *   create: {
   *     // ... data to create a Car
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Car we want to update
   *   }
   * })
   */
  upsert<T extends CarUpsertArgs>(args: Prisma.SelectSubset<T, CarUpsertArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Cars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarCountArgs} args - Arguments to filter Cars to count.
   * @example
   * // Count the number of Cars
   * const count = await prisma.car.count({
   *   where: {
   *     // ... the filter for the Cars we want to count
   *   }
   * })
  **/
  count<T extends CarCountArgs>(
    args?: Prisma.Subset<T, CarCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CarCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Car.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CarAggregateArgs>(args: Prisma.Subset<T, CarAggregateArgs>): Prisma.PrismaPromise<GetCarAggregateType<T>>

  /**
   * Group by Car.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CarGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CarGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CarGroupByArgs['orderBy'] }
      : { orderBy?: CarGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Car model
 */
readonly fields: CarFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Car.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CarClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  savedBy<T extends Prisma.Car$savedByArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Car$savedByArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  testDriveBookings<T extends Prisma.Car$testDriveBookingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Car$testDriveBookingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Car model
 */
export interface CarFieldRefs {
  readonly id: Prisma.FieldRef<"Car", 'String'>
  readonly brand: Prisma.FieldRef<"Car", 'String'>
  readonly model: Prisma.FieldRef<"Car", 'String'>
  readonly year: Prisma.FieldRef<"Car", 'Int'>
  readonly price: Prisma.FieldRef<"Car", 'Decimal'>
  readonly mileage: Prisma.FieldRef<"Car", 'Int'>
  readonly color: Prisma.FieldRef<"Car", 'String'>
  readonly fuelType: Prisma.FieldRef<"Car", 'String'>
  readonly transmission: Prisma.FieldRef<"Car", 'String'>
  readonly bodyType: Prisma.FieldRef<"Car", 'String'>
  readonly seats: Prisma.FieldRef<"Car", 'Int'>
  readonly description: Prisma.FieldRef<"Car", 'String'>
  readonly status: Prisma.FieldRef<"Car", 'CarStatus'>
  readonly featured: Prisma.FieldRef<"Car", 'Boolean'>
  readonly images: Prisma.FieldRef<"Car", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"Car", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Car", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Car findUnique
 */
export type CarFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
  /**
   * Filter, which Car to fetch.
   */
  where: Prisma.CarWhereUniqueInput
}

/**
 * Car findUniqueOrThrow
 */
export type CarFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
  /**
   * Filter, which Car to fetch.
   */
  where: Prisma.CarWhereUniqueInput
}

/**
 * Car findFirst
 */
export type CarFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
  /**
   * Filter, which Car to fetch.
   */
  where?: Prisma.CarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cars to fetch.
   */
  orderBy?: Prisma.CarOrderByWithRelationInput | Prisma.CarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Cars.
   */
  cursor?: Prisma.CarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Cars.
   */
  distinct?: Prisma.CarScalarFieldEnum | Prisma.CarScalarFieldEnum[]
}

/**
 * Car findFirstOrThrow
 */
export type CarFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
  /**
   * Filter, which Car to fetch.
   */
  where?: Prisma.CarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cars to fetch.
   */
  orderBy?: Prisma.CarOrderByWithRelationInput | Prisma.CarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Cars.
   */
  cursor?: Prisma.CarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Cars.
   */
  distinct?: Prisma.CarScalarFieldEnum | Prisma.CarScalarFieldEnum[]
}

/**
 * Car findMany
 */
export type CarFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
  /**
   * Filter, which Cars to fetch.
   */
  where?: Prisma.CarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Cars to fetch.
   */
  orderBy?: Prisma.CarOrderByWithRelationInput | Prisma.CarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Cars.
   */
  cursor?: Prisma.CarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Cars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Cars.
   */
  skip?: number
  distinct?: Prisma.CarScalarFieldEnum | Prisma.CarScalarFieldEnum[]
}

/**
 * Car create
 */
export type CarCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
  /**
   * The data needed to create a Car.
   */
  data: Prisma.XOR<Prisma.CarCreateInput, Prisma.CarUncheckedCreateInput>
}

/**
 * Car createMany
 */
export type CarCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Cars.
   */
  data: Prisma.CarCreateManyInput | Prisma.CarCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Car createManyAndReturn
 */
export type CarCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * The data used to create many Cars.
   */
  data: Prisma.CarCreateManyInput | Prisma.CarCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Car update
 */
export type CarUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
  /**
   * The data needed to update a Car.
   */
  data: Prisma.XOR<Prisma.CarUpdateInput, Prisma.CarUncheckedUpdateInput>
  /**
   * Choose, which Car to update.
   */
  where: Prisma.CarWhereUniqueInput
}

/**
 * Car updateMany
 */
export type CarUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Cars.
   */
  data: Prisma.XOR<Prisma.CarUpdateManyMutationInput, Prisma.CarUncheckedUpdateManyInput>
  /**
   * Filter which Cars to update
   */
  where?: Prisma.CarWhereInput
  /**
   * Limit how many Cars to update.
   */
  limit?: number
}

/**
 * Car updateManyAndReturn
 */
export type CarUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * The data used to update Cars.
   */
  data: Prisma.XOR<Prisma.CarUpdateManyMutationInput, Prisma.CarUncheckedUpdateManyInput>
  /**
   * Filter which Cars to update
   */
  where?: Prisma.CarWhereInput
  /**
   * Limit how many Cars to update.
   */
  limit?: number
}

/**
 * Car upsert
 */
export type CarUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
  /**
   * The filter to search for the Car to update in case it exists.
   */
  where: Prisma.CarWhereUniqueInput
  /**
   * In case the Car found by the `where` argument doesn't exist, create a new Car with this data.
   */
  create: Prisma.XOR<Prisma.CarCreateInput, Prisma.CarUncheckedCreateInput>
  /**
   * In case the Car was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CarUpdateInput, Prisma.CarUncheckedUpdateInput>
}

/**
 * Car delete
 */
export type CarDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
  /**
   * Filter which Car to delete.
   */
  where: Prisma.CarWhereUniqueInput
}

/**
 * Car deleteMany
 */
export type CarDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Cars to delete
   */
  where?: Prisma.CarWhereInput
  /**
   * Limit how many Cars to delete.
   */
  limit?: number
}

/**
 * Car.savedBy
 */
export type Car$savedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  where?: Prisma.UserSavedCarWhereInput
  orderBy?: Prisma.UserSavedCarOrderByWithRelationInput | Prisma.UserSavedCarOrderByWithRelationInput[]
  cursor?: Prisma.UserSavedCarWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserSavedCarScalarFieldEnum | Prisma.UserSavedCarScalarFieldEnum[]
}

/**
 * Car.testDriveBookings
 */
export type Car$testDriveBookingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  where?: Prisma.TestDriveBookingWhereInput
  orderBy?: Prisma.TestDriveBookingOrderByWithRelationInput | Prisma.TestDriveBookingOrderByWithRelationInput[]
  cursor?: Prisma.TestDriveBookingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TestDriveBookingScalarFieldEnum | Prisma.TestDriveBookingScalarFieldEnum[]
}

/**
 * Car without action
 */
export type CarDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Car
   */
  select?: Prisma.CarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Car
   */
  omit?: Prisma.CarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CarInclude<ExtArgs> | null
}
