
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `DealershipInfo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model DealershipInfo
 * 
 */
export type DealershipInfoModel = runtime.Types.Result.DefaultSelection<Prisma.$DealershipInfoPayload>

export type AggregateDealershipInfo = {
  _count: DealershipInfoCountAggregateOutputType | null
  _min: DealershipInfoMinAggregateOutputType | null
  _max: DealershipInfoMaxAggregateOutputType | null
}

export type DealershipInfoMinAggregateOutputType = {
  id: string | null
  name: string | null
  address: string | null
  phone: string | null
  email: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DealershipInfoMaxAggregateOutputType = {
  id: string | null
  name: string | null
  address: string | null
  phone: string | null
  email: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DealershipInfoCountAggregateOutputType = {
  id: number
  name: number
  address: number
  phone: number
  email: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DealershipInfoMinAggregateInputType = {
  id?: true
  name?: true
  address?: true
  phone?: true
  email?: true
  createdAt?: true
  updatedAt?: true
}

export type DealershipInfoMaxAggregateInputType = {
  id?: true
  name?: true
  address?: true
  phone?: true
  email?: true
  createdAt?: true
  updatedAt?: true
}

export type DealershipInfoCountAggregateInputType = {
  id?: true
  name?: true
  address?: true
  phone?: true
  email?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DealershipInfoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DealershipInfo to aggregate.
   */
  where?: Prisma.DealershipInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DealershipInfos to fetch.
   */
  orderBy?: Prisma.DealershipInfoOrderByWithRelationInput | Prisma.DealershipInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DealershipInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DealershipInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DealershipInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DealershipInfos
  **/
  _count?: true | DealershipInfoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DealershipInfoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DealershipInfoMaxAggregateInputType
}

export type GetDealershipInfoAggregateType<T extends DealershipInfoAggregateArgs> = {
      [P in keyof T & keyof AggregateDealershipInfo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDealershipInfo[P]>
    : Prisma.GetScalarType<T[P], AggregateDealershipInfo[P]>
}




export type DealershipInfoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DealershipInfoWhereInput
  orderBy?: Prisma.DealershipInfoOrderByWithAggregationInput | Prisma.DealershipInfoOrderByWithAggregationInput[]
  by: Prisma.DealershipInfoScalarFieldEnum[] | Prisma.DealershipInfoScalarFieldEnum
  having?: Prisma.DealershipInfoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DealershipInfoCountAggregateInputType | true
  _min?: DealershipInfoMinAggregateInputType
  _max?: DealershipInfoMaxAggregateInputType
}

export type DealershipInfoGroupByOutputType = {
  id: string
  name: string
  address: string
  phone: string
  email: string
  createdAt: Date
  updatedAt: Date
  _count: DealershipInfoCountAggregateOutputType | null
  _min: DealershipInfoMinAggregateOutputType | null
  _max: DealershipInfoMaxAggregateOutputType | null
}

type GetDealershipInfoGroupByPayload<T extends DealershipInfoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DealershipInfoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DealershipInfoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DealershipInfoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DealershipInfoGroupByOutputType[P]>
      }
    >
  > 



export type DealershipInfoWhereInput = {
  AND?: Prisma.DealershipInfoWhereInput | Prisma.DealershipInfoWhereInput[]
  OR?: Prisma.DealershipInfoWhereInput[]
  NOT?: Prisma.DealershipInfoWhereInput | Prisma.DealershipInfoWhereInput[]
  id?: Prisma.StringFilter<"DealershipInfo"> | string
  name?: Prisma.StringFilter<"DealershipInfo"> | string
  address?: Prisma.StringFilter<"DealershipInfo"> | string
  phone?: Prisma.StringFilter<"DealershipInfo"> | string
  email?: Prisma.StringFilter<"DealershipInfo"> | string
  createdAt?: Prisma.DateTimeFilter<"DealershipInfo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DealershipInfo"> | Date | string
  workingHours?: Prisma.WorkingHourListRelationFilter
}

export type DealershipInfoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workingHours?: Prisma.WorkingHourOrderByRelationAggregateInput
}

export type DealershipInfoWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DealershipInfoWhereInput | Prisma.DealershipInfoWhereInput[]
  OR?: Prisma.DealershipInfoWhereInput[]
  NOT?: Prisma.DealershipInfoWhereInput | Prisma.DealershipInfoWhereInput[]
  name?: Prisma.StringFilter<"DealershipInfo"> | string
  address?: Prisma.StringFilter<"DealershipInfo"> | string
  phone?: Prisma.StringFilter<"DealershipInfo"> | string
  email?: Prisma.StringFilter<"DealershipInfo"> | string
  createdAt?: Prisma.DateTimeFilter<"DealershipInfo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DealershipInfo"> | Date | string
  workingHours?: Prisma.WorkingHourListRelationFilter
}, "id">

export type DealershipInfoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DealershipInfoCountOrderByAggregateInput
  _max?: Prisma.DealershipInfoMaxOrderByAggregateInput
  _min?: Prisma.DealershipInfoMinOrderByAggregateInput
}

export type DealershipInfoScalarWhereWithAggregatesInput = {
  AND?: Prisma.DealershipInfoScalarWhereWithAggregatesInput | Prisma.DealershipInfoScalarWhereWithAggregatesInput[]
  OR?: Prisma.DealershipInfoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DealershipInfoScalarWhereWithAggregatesInput | Prisma.DealershipInfoScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DealershipInfo"> | string
  name?: Prisma.StringWithAggregatesFilter<"DealershipInfo"> | string
  address?: Prisma.StringWithAggregatesFilter<"DealershipInfo"> | string
  phone?: Prisma.StringWithAggregatesFilter<"DealershipInfo"> | string
  email?: Prisma.StringWithAggregatesFilter<"DealershipInfo"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DealershipInfo"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DealershipInfo"> | Date | string
}

export type DealershipInfoCreateInput = {
  id?: string
  name?: string
  address?: string
  phone?: string
  email?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  workingHours?: Prisma.WorkingHourCreateNestedManyWithoutDealershipInput
}

export type DealershipInfoUncheckedCreateInput = {
  id?: string
  name?: string
  address?: string
  phone?: string
  email?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  workingHours?: Prisma.WorkingHourUncheckedCreateNestedManyWithoutDealershipInput
}

export type DealershipInfoUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workingHours?: Prisma.WorkingHourUpdateManyWithoutDealershipNestedInput
}

export type DealershipInfoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workingHours?: Prisma.WorkingHourUncheckedUpdateManyWithoutDealershipNestedInput
}

export type DealershipInfoCreateManyInput = {
  id?: string
  name?: string
  address?: string
  phone?: string
  email?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DealershipInfoUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DealershipInfoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DealershipInfoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DealershipInfoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DealershipInfoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DealershipInfoScalarRelationFilter = {
  is?: Prisma.DealershipInfoWhereInput
  isNot?: Prisma.DealershipInfoWhereInput
}

export type DealershipInfoCreateNestedOneWithoutWorkingHoursInput = {
  create?: Prisma.XOR<Prisma.DealershipInfoCreateWithoutWorkingHoursInput, Prisma.DealershipInfoUncheckedCreateWithoutWorkingHoursInput>
  connectOrCreate?: Prisma.DealershipInfoCreateOrConnectWithoutWorkingHoursInput
  connect?: Prisma.DealershipInfoWhereUniqueInput
}

export type DealershipInfoUpdateOneRequiredWithoutWorkingHoursNestedInput = {
  create?: Prisma.XOR<Prisma.DealershipInfoCreateWithoutWorkingHoursInput, Prisma.DealershipInfoUncheckedCreateWithoutWorkingHoursInput>
  connectOrCreate?: Prisma.DealershipInfoCreateOrConnectWithoutWorkingHoursInput
  upsert?: Prisma.DealershipInfoUpsertWithoutWorkingHoursInput
  connect?: Prisma.DealershipInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DealershipInfoUpdateToOneWithWhereWithoutWorkingHoursInput, Prisma.DealershipInfoUpdateWithoutWorkingHoursInput>, Prisma.DealershipInfoUncheckedUpdateWithoutWorkingHoursInput>
}

export type DealershipInfoCreateWithoutWorkingHoursInput = {
  id?: string
  name?: string
  address?: string
  phone?: string
  email?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DealershipInfoUncheckedCreateWithoutWorkingHoursInput = {
  id?: string
  name?: string
  address?: string
  phone?: string
  email?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DealershipInfoCreateOrConnectWithoutWorkingHoursInput = {
  where: Prisma.DealershipInfoWhereUniqueInput
  create: Prisma.XOR<Prisma.DealershipInfoCreateWithoutWorkingHoursInput, Prisma.DealershipInfoUncheckedCreateWithoutWorkingHoursInput>
}

export type DealershipInfoUpsertWithoutWorkingHoursInput = {
  update: Prisma.XOR<Prisma.DealershipInfoUpdateWithoutWorkingHoursInput, Prisma.DealershipInfoUncheckedUpdateWithoutWorkingHoursInput>
  create: Prisma.XOR<Prisma.DealershipInfoCreateWithoutWorkingHoursInput, Prisma.DealershipInfoUncheckedCreateWithoutWorkingHoursInput>
  where?: Prisma.DealershipInfoWhereInput
}

export type DealershipInfoUpdateToOneWithWhereWithoutWorkingHoursInput = {
  where?: Prisma.DealershipInfoWhereInput
  data: Prisma.XOR<Prisma.DealershipInfoUpdateWithoutWorkingHoursInput, Prisma.DealershipInfoUncheckedUpdateWithoutWorkingHoursInput>
}

export type DealershipInfoUpdateWithoutWorkingHoursInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DealershipInfoUncheckedUpdateWithoutWorkingHoursInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DealershipInfoCountOutputType
 */

export type DealershipInfoCountOutputType = {
  workingHours: number
}

export type DealershipInfoCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workingHours?: boolean | DealershipInfoCountOutputTypeCountWorkingHoursArgs
}

/**
 * DealershipInfoCountOutputType without action
 */
export type DealershipInfoCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfoCountOutputType
   */
  select?: Prisma.DealershipInfoCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DealershipInfoCountOutputType without action
 */
export type DealershipInfoCountOutputTypeCountWorkingHoursArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkingHourWhereInput
}


export type DealershipInfoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  phone?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workingHours?: boolean | Prisma.DealershipInfo$workingHoursArgs<ExtArgs>
  _count?: boolean | Prisma.DealershipInfoCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dealershipInfo"]>

export type DealershipInfoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  phone?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["dealershipInfo"]>

export type DealershipInfoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  phone?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["dealershipInfo"]>

export type DealershipInfoSelectScalar = {
  id?: boolean
  name?: boolean
  address?: boolean
  phone?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DealershipInfoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "address" | "phone" | "email" | "createdAt" | "updatedAt", ExtArgs["result"]["dealershipInfo"]>
export type DealershipInfoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workingHours?: boolean | Prisma.DealershipInfo$workingHoursArgs<ExtArgs>
  _count?: boolean | Prisma.DealershipInfoCountOutputTypeDefaultArgs<ExtArgs>
}
export type DealershipInfoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DealershipInfoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DealershipInfoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DealershipInfo"
  objects: {
    workingHours: Prisma.$WorkingHourPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    address: string
    phone: string
    email: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["dealershipInfo"]>
  composites: {}
}

export type DealershipInfoGetPayload<S extends boolean | null | undefined | DealershipInfoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload, S>

export type DealershipInfoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DealershipInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DealershipInfoCountAggregateInputType | true
  }

export interface DealershipInfoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DealershipInfo'], meta: { name: 'DealershipInfo' } }
  /**
   * Find zero or one DealershipInfo that matches the filter.
   * @param {DealershipInfoFindUniqueArgs} args - Arguments to find a DealershipInfo
   * @example
   * // Get one DealershipInfo
   * const dealershipInfo = await prisma.dealershipInfo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DealershipInfoFindUniqueArgs>(args: Prisma.SelectSubset<T, DealershipInfoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DealershipInfoClient<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DealershipInfo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DealershipInfoFindUniqueOrThrowArgs} args - Arguments to find a DealershipInfo
   * @example
   * // Get one DealershipInfo
   * const dealershipInfo = await prisma.dealershipInfo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DealershipInfoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DealershipInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DealershipInfoClient<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DealershipInfo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealershipInfoFindFirstArgs} args - Arguments to find a DealershipInfo
   * @example
   * // Get one DealershipInfo
   * const dealershipInfo = await prisma.dealershipInfo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DealershipInfoFindFirstArgs>(args?: Prisma.SelectSubset<T, DealershipInfoFindFirstArgs<ExtArgs>>): Prisma.Prisma__DealershipInfoClient<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DealershipInfo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealershipInfoFindFirstOrThrowArgs} args - Arguments to find a DealershipInfo
   * @example
   * // Get one DealershipInfo
   * const dealershipInfo = await prisma.dealershipInfo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DealershipInfoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DealershipInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DealershipInfoClient<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DealershipInfos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealershipInfoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DealershipInfos
   * const dealershipInfos = await prisma.dealershipInfo.findMany()
   * 
   * // Get first 10 DealershipInfos
   * const dealershipInfos = await prisma.dealershipInfo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dealershipInfoWithIdOnly = await prisma.dealershipInfo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DealershipInfoFindManyArgs>(args?: Prisma.SelectSubset<T, DealershipInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DealershipInfo.
   * @param {DealershipInfoCreateArgs} args - Arguments to create a DealershipInfo.
   * @example
   * // Create one DealershipInfo
   * const DealershipInfo = await prisma.dealershipInfo.create({
   *   data: {
   *     // ... data to create a DealershipInfo
   *   }
   * })
   * 
   */
  create<T extends DealershipInfoCreateArgs>(args: Prisma.SelectSubset<T, DealershipInfoCreateArgs<ExtArgs>>): Prisma.Prisma__DealershipInfoClient<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DealershipInfos.
   * @param {DealershipInfoCreateManyArgs} args - Arguments to create many DealershipInfos.
   * @example
   * // Create many DealershipInfos
   * const dealershipInfo = await prisma.dealershipInfo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DealershipInfoCreateManyArgs>(args?: Prisma.SelectSubset<T, DealershipInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DealershipInfos and returns the data saved in the database.
   * @param {DealershipInfoCreateManyAndReturnArgs} args - Arguments to create many DealershipInfos.
   * @example
   * // Create many DealershipInfos
   * const dealershipInfo = await prisma.dealershipInfo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DealershipInfos and only return the `id`
   * const dealershipInfoWithIdOnly = await prisma.dealershipInfo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DealershipInfoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DealershipInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DealershipInfo.
   * @param {DealershipInfoDeleteArgs} args - Arguments to delete one DealershipInfo.
   * @example
   * // Delete one DealershipInfo
   * const DealershipInfo = await prisma.dealershipInfo.delete({
   *   where: {
   *     // ... filter to delete one DealershipInfo
   *   }
   * })
   * 
   */
  delete<T extends DealershipInfoDeleteArgs>(args: Prisma.SelectSubset<T, DealershipInfoDeleteArgs<ExtArgs>>): Prisma.Prisma__DealershipInfoClient<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DealershipInfo.
   * @param {DealershipInfoUpdateArgs} args - Arguments to update one DealershipInfo.
   * @example
   * // Update one DealershipInfo
   * const dealershipInfo = await prisma.dealershipInfo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DealershipInfoUpdateArgs>(args: Prisma.SelectSubset<T, DealershipInfoUpdateArgs<ExtArgs>>): Prisma.Prisma__DealershipInfoClient<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DealershipInfos.
   * @param {DealershipInfoDeleteManyArgs} args - Arguments to filter DealershipInfos to delete.
   * @example
   * // Delete a few DealershipInfos
   * const { count } = await prisma.dealershipInfo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DealershipInfoDeleteManyArgs>(args?: Prisma.SelectSubset<T, DealershipInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DealershipInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealershipInfoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DealershipInfos
   * const dealershipInfo = await prisma.dealershipInfo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DealershipInfoUpdateManyArgs>(args: Prisma.SelectSubset<T, DealershipInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DealershipInfos and returns the data updated in the database.
   * @param {DealershipInfoUpdateManyAndReturnArgs} args - Arguments to update many DealershipInfos.
   * @example
   * // Update many DealershipInfos
   * const dealershipInfo = await prisma.dealershipInfo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DealershipInfos and only return the `id`
   * const dealershipInfoWithIdOnly = await prisma.dealershipInfo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DealershipInfoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DealershipInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DealershipInfo.
   * @param {DealershipInfoUpsertArgs} args - Arguments to update or create a DealershipInfo.
   * @example
   * // Update or create a DealershipInfo
   * const dealershipInfo = await prisma.dealershipInfo.upsert({
   *   create: {
   *     // ... data to create a DealershipInfo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DealershipInfo we want to update
   *   }
   * })
   */
  upsert<T extends DealershipInfoUpsertArgs>(args: Prisma.SelectSubset<T, DealershipInfoUpsertArgs<ExtArgs>>): Prisma.Prisma__DealershipInfoClient<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DealershipInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealershipInfoCountArgs} args - Arguments to filter DealershipInfos to count.
   * @example
   * // Count the number of DealershipInfos
   * const count = await prisma.dealershipInfo.count({
   *   where: {
   *     // ... the filter for the DealershipInfos we want to count
   *   }
   * })
  **/
  count<T extends DealershipInfoCountArgs>(
    args?: Prisma.Subset<T, DealershipInfoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DealershipInfoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DealershipInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealershipInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DealershipInfoAggregateArgs>(args: Prisma.Subset<T, DealershipInfoAggregateArgs>): Prisma.PrismaPromise<GetDealershipInfoAggregateType<T>>

  /**
   * Group by DealershipInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealershipInfoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DealershipInfoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DealershipInfoGroupByArgs['orderBy'] }
      : { orderBy?: DealershipInfoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DealershipInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDealershipInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DealershipInfo model
 */
readonly fields: DealershipInfoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DealershipInfo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DealershipInfoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  workingHours<T extends Prisma.DealershipInfo$workingHoursArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DealershipInfo$workingHoursArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DealershipInfo model
 */
export interface DealershipInfoFieldRefs {
  readonly id: Prisma.FieldRef<"DealershipInfo", 'String'>
  readonly name: Prisma.FieldRef<"DealershipInfo", 'String'>
  readonly address: Prisma.FieldRef<"DealershipInfo", 'String'>
  readonly phone: Prisma.FieldRef<"DealershipInfo", 'String'>
  readonly email: Prisma.FieldRef<"DealershipInfo", 'String'>
  readonly createdAt: Prisma.FieldRef<"DealershipInfo", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DealershipInfo", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DealershipInfo findUnique
 */
export type DealershipInfoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
  /**
   * Filter, which DealershipInfo to fetch.
   */
  where: Prisma.DealershipInfoWhereUniqueInput
}

/**
 * DealershipInfo findUniqueOrThrow
 */
export type DealershipInfoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
  /**
   * Filter, which DealershipInfo to fetch.
   */
  where: Prisma.DealershipInfoWhereUniqueInput
}

/**
 * DealershipInfo findFirst
 */
export type DealershipInfoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
  /**
   * Filter, which DealershipInfo to fetch.
   */
  where?: Prisma.DealershipInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DealershipInfos to fetch.
   */
  orderBy?: Prisma.DealershipInfoOrderByWithRelationInput | Prisma.DealershipInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DealershipInfos.
   */
  cursor?: Prisma.DealershipInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DealershipInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DealershipInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DealershipInfos.
   */
  distinct?: Prisma.DealershipInfoScalarFieldEnum | Prisma.DealershipInfoScalarFieldEnum[]
}

/**
 * DealershipInfo findFirstOrThrow
 */
export type DealershipInfoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
  /**
   * Filter, which DealershipInfo to fetch.
   */
  where?: Prisma.DealershipInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DealershipInfos to fetch.
   */
  orderBy?: Prisma.DealershipInfoOrderByWithRelationInput | Prisma.DealershipInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DealershipInfos.
   */
  cursor?: Prisma.DealershipInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DealershipInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DealershipInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DealershipInfos.
   */
  distinct?: Prisma.DealershipInfoScalarFieldEnum | Prisma.DealershipInfoScalarFieldEnum[]
}

/**
 * DealershipInfo findMany
 */
export type DealershipInfoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
  /**
   * Filter, which DealershipInfos to fetch.
   */
  where?: Prisma.DealershipInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DealershipInfos to fetch.
   */
  orderBy?: Prisma.DealershipInfoOrderByWithRelationInput | Prisma.DealershipInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DealershipInfos.
   */
  cursor?: Prisma.DealershipInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DealershipInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DealershipInfos.
   */
  skip?: number
  distinct?: Prisma.DealershipInfoScalarFieldEnum | Prisma.DealershipInfoScalarFieldEnum[]
}

/**
 * DealershipInfo create
 */
export type DealershipInfoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
  /**
   * The data needed to create a DealershipInfo.
   */
  data: Prisma.XOR<Prisma.DealershipInfoCreateInput, Prisma.DealershipInfoUncheckedCreateInput>
}

/**
 * DealershipInfo createMany
 */
export type DealershipInfoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DealershipInfos.
   */
  data: Prisma.DealershipInfoCreateManyInput | Prisma.DealershipInfoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DealershipInfo createManyAndReturn
 */
export type DealershipInfoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * The data used to create many DealershipInfos.
   */
  data: Prisma.DealershipInfoCreateManyInput | Prisma.DealershipInfoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DealershipInfo update
 */
export type DealershipInfoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
  /**
   * The data needed to update a DealershipInfo.
   */
  data: Prisma.XOR<Prisma.DealershipInfoUpdateInput, Prisma.DealershipInfoUncheckedUpdateInput>
  /**
   * Choose, which DealershipInfo to update.
   */
  where: Prisma.DealershipInfoWhereUniqueInput
}

/**
 * DealershipInfo updateMany
 */
export type DealershipInfoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DealershipInfos.
   */
  data: Prisma.XOR<Prisma.DealershipInfoUpdateManyMutationInput, Prisma.DealershipInfoUncheckedUpdateManyInput>
  /**
   * Filter which DealershipInfos to update
   */
  where?: Prisma.DealershipInfoWhereInput
  /**
   * Limit how many DealershipInfos to update.
   */
  limit?: number
}

/**
 * DealershipInfo updateManyAndReturn
 */
export type DealershipInfoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * The data used to update DealershipInfos.
   */
  data: Prisma.XOR<Prisma.DealershipInfoUpdateManyMutationInput, Prisma.DealershipInfoUncheckedUpdateManyInput>
  /**
   * Filter which DealershipInfos to update
   */
  where?: Prisma.DealershipInfoWhereInput
  /**
   * Limit how many DealershipInfos to update.
   */
  limit?: number
}

/**
 * DealershipInfo upsert
 */
export type DealershipInfoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
  /**
   * The filter to search for the DealershipInfo to update in case it exists.
   */
  where: Prisma.DealershipInfoWhereUniqueInput
  /**
   * In case the DealershipInfo found by the `where` argument doesn't exist, create a new DealershipInfo with this data.
   */
  create: Prisma.XOR<Prisma.DealershipInfoCreateInput, Prisma.DealershipInfoUncheckedCreateInput>
  /**
   * In case the DealershipInfo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DealershipInfoUpdateInput, Prisma.DealershipInfoUncheckedUpdateInput>
}

/**
 * DealershipInfo delete
 */
export type DealershipInfoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
  /**
   * Filter which DealershipInfo to delete.
   */
  where: Prisma.DealershipInfoWhereUniqueInput
}

/**
 * DealershipInfo deleteMany
 */
export type DealershipInfoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DealershipInfos to delete
   */
  where?: Prisma.DealershipInfoWhereInput
  /**
   * Limit how many DealershipInfos to delete.
   */
  limit?: number
}

/**
 * DealershipInfo.workingHours
 */
export type DealershipInfo$workingHoursArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  where?: Prisma.WorkingHourWhereInput
  orderBy?: Prisma.WorkingHourOrderByWithRelationInput | Prisma.WorkingHourOrderByWithRelationInput[]
  cursor?: Prisma.WorkingHourWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkingHourScalarFieldEnum | Prisma.WorkingHourScalarFieldEnum[]
}

/**
 * DealershipInfo without action
 */
export type DealershipInfoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealershipInfo
   */
  select?: Prisma.DealershipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DealershipInfo
   */
  omit?: Prisma.DealershipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealershipInfoInclude<ExtArgs> | null
}
