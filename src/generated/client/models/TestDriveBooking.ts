
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TestDriveBooking` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TestDriveBooking
 * 
 */
export type TestDriveBookingModel = runtime.Types.Result.DefaultSelection<Prisma.$TestDriveBookingPayload>

export type AggregateTestDriveBooking = {
  _count: TestDriveBookingCountAggregateOutputType | null
  _min: TestDriveBookingMinAggregateOutputType | null
  _max: TestDriveBookingMaxAggregateOutputType | null
}

export type TestDriveBookingMinAggregateOutputType = {
  id: string | null
  carId: string | null
  userId: string | null
  bookingDate: Date | null
  startTime: string | null
  endTime: string | null
  status: $Enums.BookingStatus | null
  notes: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TestDriveBookingMaxAggregateOutputType = {
  id: string | null
  carId: string | null
  userId: string | null
  bookingDate: Date | null
  startTime: string | null
  endTime: string | null
  status: $Enums.BookingStatus | null
  notes: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TestDriveBookingCountAggregateOutputType = {
  id: number
  carId: number
  userId: number
  bookingDate: number
  startTime: number
  endTime: number
  status: number
  notes: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TestDriveBookingMinAggregateInputType = {
  id?: true
  carId?: true
  userId?: true
  bookingDate?: true
  startTime?: true
  endTime?: true
  status?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
}

export type TestDriveBookingMaxAggregateInputType = {
  id?: true
  carId?: true
  userId?: true
  bookingDate?: true
  startTime?: true
  endTime?: true
  status?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
}

export type TestDriveBookingCountAggregateInputType = {
  id?: true
  carId?: true
  userId?: true
  bookingDate?: true
  startTime?: true
  endTime?: true
  status?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TestDriveBookingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TestDriveBooking to aggregate.
   */
  where?: Prisma.TestDriveBookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestDriveBookings to fetch.
   */
  orderBy?: Prisma.TestDriveBookingOrderByWithRelationInput | Prisma.TestDriveBookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TestDriveBookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestDriveBookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestDriveBookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TestDriveBookings
  **/
  _count?: true | TestDriveBookingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TestDriveBookingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TestDriveBookingMaxAggregateInputType
}

export type GetTestDriveBookingAggregateType<T extends TestDriveBookingAggregateArgs> = {
      [P in keyof T & keyof AggregateTestDriveBooking]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTestDriveBooking[P]>
    : Prisma.GetScalarType<T[P], AggregateTestDriveBooking[P]>
}




export type TestDriveBookingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TestDriveBookingWhereInput
  orderBy?: Prisma.TestDriveBookingOrderByWithAggregationInput | Prisma.TestDriveBookingOrderByWithAggregationInput[]
  by: Prisma.TestDriveBookingScalarFieldEnum[] | Prisma.TestDriveBookingScalarFieldEnum
  having?: Prisma.TestDriveBookingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TestDriveBookingCountAggregateInputType | true
  _min?: TestDriveBookingMinAggregateInputType
  _max?: TestDriveBookingMaxAggregateInputType
}

export type TestDriveBookingGroupByOutputType = {
  id: string
  carId: string
  userId: string
  bookingDate: Date
  startTime: string
  endTime: string
  status: $Enums.BookingStatus
  notes: string | null
  createdAt: Date
  updatedAt: Date
  _count: TestDriveBookingCountAggregateOutputType | null
  _min: TestDriveBookingMinAggregateOutputType | null
  _max: TestDriveBookingMaxAggregateOutputType | null
}

type GetTestDriveBookingGroupByPayload<T extends TestDriveBookingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TestDriveBookingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TestDriveBookingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TestDriveBookingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TestDriveBookingGroupByOutputType[P]>
      }
    >
  > 



export type TestDriveBookingWhereInput = {
  AND?: Prisma.TestDriveBookingWhereInput | Prisma.TestDriveBookingWhereInput[]
  OR?: Prisma.TestDriveBookingWhereInput[]
  NOT?: Prisma.TestDriveBookingWhereInput | Prisma.TestDriveBookingWhereInput[]
  id?: Prisma.StringFilter<"TestDriveBooking"> | string
  carId?: Prisma.StringFilter<"TestDriveBooking"> | string
  userId?: Prisma.StringFilter<"TestDriveBooking"> | string
  bookingDate?: Prisma.DateTimeFilter<"TestDriveBooking"> | Date | string
  startTime?: Prisma.StringFilter<"TestDriveBooking"> | string
  endTime?: Prisma.StringFilter<"TestDriveBooking"> | string
  status?: Prisma.EnumBookingStatusFilter<"TestDriveBooking"> | $Enums.BookingStatus
  notes?: Prisma.StringNullableFilter<"TestDriveBooking"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TestDriveBooking"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TestDriveBooking"> | Date | string
  car?: Prisma.XOR<Prisma.CarScalarRelationFilter, Prisma.CarWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type TestDriveBookingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  bookingDate?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  car?: Prisma.CarOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type TestDriveBookingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TestDriveBookingWhereInput | Prisma.TestDriveBookingWhereInput[]
  OR?: Prisma.TestDriveBookingWhereInput[]
  NOT?: Prisma.TestDriveBookingWhereInput | Prisma.TestDriveBookingWhereInput[]
  carId?: Prisma.StringFilter<"TestDriveBooking"> | string
  userId?: Prisma.StringFilter<"TestDriveBooking"> | string
  bookingDate?: Prisma.DateTimeFilter<"TestDriveBooking"> | Date | string
  startTime?: Prisma.StringFilter<"TestDriveBooking"> | string
  endTime?: Prisma.StringFilter<"TestDriveBooking"> | string
  status?: Prisma.EnumBookingStatusFilter<"TestDriveBooking"> | $Enums.BookingStatus
  notes?: Prisma.StringNullableFilter<"TestDriveBooking"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TestDriveBooking"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TestDriveBooking"> | Date | string
  car?: Prisma.XOR<Prisma.CarScalarRelationFilter, Prisma.CarWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type TestDriveBookingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  bookingDate?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TestDriveBookingCountOrderByAggregateInput
  _max?: Prisma.TestDriveBookingMaxOrderByAggregateInput
  _min?: Prisma.TestDriveBookingMinOrderByAggregateInput
}

export type TestDriveBookingScalarWhereWithAggregatesInput = {
  AND?: Prisma.TestDriveBookingScalarWhereWithAggregatesInput | Prisma.TestDriveBookingScalarWhereWithAggregatesInput[]
  OR?: Prisma.TestDriveBookingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TestDriveBookingScalarWhereWithAggregatesInput | Prisma.TestDriveBookingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TestDriveBooking"> | string
  carId?: Prisma.StringWithAggregatesFilter<"TestDriveBooking"> | string
  userId?: Prisma.StringWithAggregatesFilter<"TestDriveBooking"> | string
  bookingDate?: Prisma.DateTimeWithAggregatesFilter<"TestDriveBooking"> | Date | string
  startTime?: Prisma.StringWithAggregatesFilter<"TestDriveBooking"> | string
  endTime?: Prisma.StringWithAggregatesFilter<"TestDriveBooking"> | string
  status?: Prisma.EnumBookingStatusWithAggregatesFilter<"TestDriveBooking"> | $Enums.BookingStatus
  notes?: Prisma.StringNullableWithAggregatesFilter<"TestDriveBooking"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TestDriveBooking"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TestDriveBooking"> | Date | string
}

export type TestDriveBookingCreateInput = {
  id?: string
  bookingDate: Date | string
  startTime: string
  endTime: string
  status?: $Enums.BookingStatus
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  car: Prisma.CarCreateNestedOneWithoutTestDriveBookingsInput
  user: Prisma.UserCreateNestedOneWithoutTestDrivesInput
}

export type TestDriveBookingUncheckedCreateInput = {
  id?: string
  carId: string
  userId: string
  bookingDate: Date | string
  startTime: string
  endTime: string
  status?: $Enums.BookingStatus
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestDriveBookingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  car?: Prisma.CarUpdateOneRequiredWithoutTestDriveBookingsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutTestDrivesNestedInput
}

export type TestDriveBookingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  carId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestDriveBookingCreateManyInput = {
  id?: string
  carId: string
  userId: string
  bookingDate: Date | string
  startTime: string
  endTime: string
  status?: $Enums.BookingStatus
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestDriveBookingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestDriveBookingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  carId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestDriveBookingListRelationFilter = {
  every?: Prisma.TestDriveBookingWhereInput
  some?: Prisma.TestDriveBookingWhereInput
  none?: Prisma.TestDriveBookingWhereInput
}

export type TestDriveBookingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TestDriveBookingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  bookingDate?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TestDriveBookingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  bookingDate?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TestDriveBookingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  bookingDate?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TestDriveBookingCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutUserInput, Prisma.TestDriveBookingUncheckedCreateWithoutUserInput> | Prisma.TestDriveBookingCreateWithoutUserInput[] | Prisma.TestDriveBookingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TestDriveBookingCreateOrConnectWithoutUserInput | Prisma.TestDriveBookingCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TestDriveBookingCreateManyUserInputEnvelope
  connect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
}

export type TestDriveBookingUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutUserInput, Prisma.TestDriveBookingUncheckedCreateWithoutUserInput> | Prisma.TestDriveBookingCreateWithoutUserInput[] | Prisma.TestDriveBookingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TestDriveBookingCreateOrConnectWithoutUserInput | Prisma.TestDriveBookingCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TestDriveBookingCreateManyUserInputEnvelope
  connect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
}

export type TestDriveBookingUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutUserInput, Prisma.TestDriveBookingUncheckedCreateWithoutUserInput> | Prisma.TestDriveBookingCreateWithoutUserInput[] | Prisma.TestDriveBookingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TestDriveBookingCreateOrConnectWithoutUserInput | Prisma.TestDriveBookingCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TestDriveBookingUpsertWithWhereUniqueWithoutUserInput | Prisma.TestDriveBookingUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TestDriveBookingCreateManyUserInputEnvelope
  set?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  disconnect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  delete?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  connect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  update?: Prisma.TestDriveBookingUpdateWithWhereUniqueWithoutUserInput | Prisma.TestDriveBookingUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TestDriveBookingUpdateManyWithWhereWithoutUserInput | Prisma.TestDriveBookingUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TestDriveBookingScalarWhereInput | Prisma.TestDriveBookingScalarWhereInput[]
}

export type TestDriveBookingUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutUserInput, Prisma.TestDriveBookingUncheckedCreateWithoutUserInput> | Prisma.TestDriveBookingCreateWithoutUserInput[] | Prisma.TestDriveBookingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TestDriveBookingCreateOrConnectWithoutUserInput | Prisma.TestDriveBookingCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TestDriveBookingUpsertWithWhereUniqueWithoutUserInput | Prisma.TestDriveBookingUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TestDriveBookingCreateManyUserInputEnvelope
  set?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  disconnect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  delete?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  connect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  update?: Prisma.TestDriveBookingUpdateWithWhereUniqueWithoutUserInput | Prisma.TestDriveBookingUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TestDriveBookingUpdateManyWithWhereWithoutUserInput | Prisma.TestDriveBookingUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TestDriveBookingScalarWhereInput | Prisma.TestDriveBookingScalarWhereInput[]
}

export type TestDriveBookingCreateNestedManyWithoutCarInput = {
  create?: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutCarInput, Prisma.TestDriveBookingUncheckedCreateWithoutCarInput> | Prisma.TestDriveBookingCreateWithoutCarInput[] | Prisma.TestDriveBookingUncheckedCreateWithoutCarInput[]
  connectOrCreate?: Prisma.TestDriveBookingCreateOrConnectWithoutCarInput | Prisma.TestDriveBookingCreateOrConnectWithoutCarInput[]
  createMany?: Prisma.TestDriveBookingCreateManyCarInputEnvelope
  connect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
}

export type TestDriveBookingUncheckedCreateNestedManyWithoutCarInput = {
  create?: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutCarInput, Prisma.TestDriveBookingUncheckedCreateWithoutCarInput> | Prisma.TestDriveBookingCreateWithoutCarInput[] | Prisma.TestDriveBookingUncheckedCreateWithoutCarInput[]
  connectOrCreate?: Prisma.TestDriveBookingCreateOrConnectWithoutCarInput | Prisma.TestDriveBookingCreateOrConnectWithoutCarInput[]
  createMany?: Prisma.TestDriveBookingCreateManyCarInputEnvelope
  connect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
}

export type TestDriveBookingUpdateManyWithoutCarNestedInput = {
  create?: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutCarInput, Prisma.TestDriveBookingUncheckedCreateWithoutCarInput> | Prisma.TestDriveBookingCreateWithoutCarInput[] | Prisma.TestDriveBookingUncheckedCreateWithoutCarInput[]
  connectOrCreate?: Prisma.TestDriveBookingCreateOrConnectWithoutCarInput | Prisma.TestDriveBookingCreateOrConnectWithoutCarInput[]
  upsert?: Prisma.TestDriveBookingUpsertWithWhereUniqueWithoutCarInput | Prisma.TestDriveBookingUpsertWithWhereUniqueWithoutCarInput[]
  createMany?: Prisma.TestDriveBookingCreateManyCarInputEnvelope
  set?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  disconnect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  delete?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  connect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  update?: Prisma.TestDriveBookingUpdateWithWhereUniqueWithoutCarInput | Prisma.TestDriveBookingUpdateWithWhereUniqueWithoutCarInput[]
  updateMany?: Prisma.TestDriveBookingUpdateManyWithWhereWithoutCarInput | Prisma.TestDriveBookingUpdateManyWithWhereWithoutCarInput[]
  deleteMany?: Prisma.TestDriveBookingScalarWhereInput | Prisma.TestDriveBookingScalarWhereInput[]
}

export type TestDriveBookingUncheckedUpdateManyWithoutCarNestedInput = {
  create?: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutCarInput, Prisma.TestDriveBookingUncheckedCreateWithoutCarInput> | Prisma.TestDriveBookingCreateWithoutCarInput[] | Prisma.TestDriveBookingUncheckedCreateWithoutCarInput[]
  connectOrCreate?: Prisma.TestDriveBookingCreateOrConnectWithoutCarInput | Prisma.TestDriveBookingCreateOrConnectWithoutCarInput[]
  upsert?: Prisma.TestDriveBookingUpsertWithWhereUniqueWithoutCarInput | Prisma.TestDriveBookingUpsertWithWhereUniqueWithoutCarInput[]
  createMany?: Prisma.TestDriveBookingCreateManyCarInputEnvelope
  set?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  disconnect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  delete?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  connect?: Prisma.TestDriveBookingWhereUniqueInput | Prisma.TestDriveBookingWhereUniqueInput[]
  update?: Prisma.TestDriveBookingUpdateWithWhereUniqueWithoutCarInput | Prisma.TestDriveBookingUpdateWithWhereUniqueWithoutCarInput[]
  updateMany?: Prisma.TestDriveBookingUpdateManyWithWhereWithoutCarInput | Prisma.TestDriveBookingUpdateManyWithWhereWithoutCarInput[]
  deleteMany?: Prisma.TestDriveBookingScalarWhereInput | Prisma.TestDriveBookingScalarWhereInput[]
}

export type EnumBookingStatusFieldUpdateOperationsInput = {
  set?: $Enums.BookingStatus
}

export type TestDriveBookingCreateWithoutUserInput = {
  id?: string
  bookingDate: Date | string
  startTime: string
  endTime: string
  status?: $Enums.BookingStatus
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  car: Prisma.CarCreateNestedOneWithoutTestDriveBookingsInput
}

export type TestDriveBookingUncheckedCreateWithoutUserInput = {
  id?: string
  carId: string
  bookingDate: Date | string
  startTime: string
  endTime: string
  status?: $Enums.BookingStatus
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestDriveBookingCreateOrConnectWithoutUserInput = {
  where: Prisma.TestDriveBookingWhereUniqueInput
  create: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutUserInput, Prisma.TestDriveBookingUncheckedCreateWithoutUserInput>
}

export type TestDriveBookingCreateManyUserInputEnvelope = {
  data: Prisma.TestDriveBookingCreateManyUserInput | Prisma.TestDriveBookingCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type TestDriveBookingUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.TestDriveBookingWhereUniqueInput
  update: Prisma.XOR<Prisma.TestDriveBookingUpdateWithoutUserInput, Prisma.TestDriveBookingUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutUserInput, Prisma.TestDriveBookingUncheckedCreateWithoutUserInput>
}

export type TestDriveBookingUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.TestDriveBookingWhereUniqueInput
  data: Prisma.XOR<Prisma.TestDriveBookingUpdateWithoutUserInput, Prisma.TestDriveBookingUncheckedUpdateWithoutUserInput>
}

export type TestDriveBookingUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.TestDriveBookingScalarWhereInput
  data: Prisma.XOR<Prisma.TestDriveBookingUpdateManyMutationInput, Prisma.TestDriveBookingUncheckedUpdateManyWithoutUserInput>
}

export type TestDriveBookingScalarWhereInput = {
  AND?: Prisma.TestDriveBookingScalarWhereInput | Prisma.TestDriveBookingScalarWhereInput[]
  OR?: Prisma.TestDriveBookingScalarWhereInput[]
  NOT?: Prisma.TestDriveBookingScalarWhereInput | Prisma.TestDriveBookingScalarWhereInput[]
  id?: Prisma.StringFilter<"TestDriveBooking"> | string
  carId?: Prisma.StringFilter<"TestDriveBooking"> | string
  userId?: Prisma.StringFilter<"TestDriveBooking"> | string
  bookingDate?: Prisma.DateTimeFilter<"TestDriveBooking"> | Date | string
  startTime?: Prisma.StringFilter<"TestDriveBooking"> | string
  endTime?: Prisma.StringFilter<"TestDriveBooking"> | string
  status?: Prisma.EnumBookingStatusFilter<"TestDriveBooking"> | $Enums.BookingStatus
  notes?: Prisma.StringNullableFilter<"TestDriveBooking"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TestDriveBooking"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TestDriveBooking"> | Date | string
}

export type TestDriveBookingCreateWithoutCarInput = {
  id?: string
  bookingDate: Date | string
  startTime: string
  endTime: string
  status?: $Enums.BookingStatus
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutTestDrivesInput
}

export type TestDriveBookingUncheckedCreateWithoutCarInput = {
  id?: string
  userId: string
  bookingDate: Date | string
  startTime: string
  endTime: string
  status?: $Enums.BookingStatus
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestDriveBookingCreateOrConnectWithoutCarInput = {
  where: Prisma.TestDriveBookingWhereUniqueInput
  create: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutCarInput, Prisma.TestDriveBookingUncheckedCreateWithoutCarInput>
}

export type TestDriveBookingCreateManyCarInputEnvelope = {
  data: Prisma.TestDriveBookingCreateManyCarInput | Prisma.TestDriveBookingCreateManyCarInput[]
  skipDuplicates?: boolean
}

export type TestDriveBookingUpsertWithWhereUniqueWithoutCarInput = {
  where: Prisma.TestDriveBookingWhereUniqueInput
  update: Prisma.XOR<Prisma.TestDriveBookingUpdateWithoutCarInput, Prisma.TestDriveBookingUncheckedUpdateWithoutCarInput>
  create: Prisma.XOR<Prisma.TestDriveBookingCreateWithoutCarInput, Prisma.TestDriveBookingUncheckedCreateWithoutCarInput>
}

export type TestDriveBookingUpdateWithWhereUniqueWithoutCarInput = {
  where: Prisma.TestDriveBookingWhereUniqueInput
  data: Prisma.XOR<Prisma.TestDriveBookingUpdateWithoutCarInput, Prisma.TestDriveBookingUncheckedUpdateWithoutCarInput>
}

export type TestDriveBookingUpdateManyWithWhereWithoutCarInput = {
  where: Prisma.TestDriveBookingScalarWhereInput
  data: Prisma.XOR<Prisma.TestDriveBookingUpdateManyMutationInput, Prisma.TestDriveBookingUncheckedUpdateManyWithoutCarInput>
}

export type TestDriveBookingCreateManyUserInput = {
  id?: string
  carId: string
  bookingDate: Date | string
  startTime: string
  endTime: string
  status?: $Enums.BookingStatus
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestDriveBookingUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  car?: Prisma.CarUpdateOneRequiredWithoutTestDriveBookingsNestedInput
}

export type TestDriveBookingUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  carId?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestDriveBookingUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  carId?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestDriveBookingCreateManyCarInput = {
  id?: string
  userId: string
  bookingDate: Date | string
  startTime: string
  endTime: string
  status?: $Enums.BookingStatus
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TestDriveBookingUpdateWithoutCarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutTestDrivesNestedInput
}

export type TestDriveBookingUncheckedUpdateWithoutCarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TestDriveBookingUncheckedUpdateManyWithoutCarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  bookingDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TestDriveBookingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  carId?: boolean
  userId?: boolean
  bookingDate?: boolean
  startTime?: boolean
  endTime?: boolean
  status?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["testDriveBooking"]>

export type TestDriveBookingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  carId?: boolean
  userId?: boolean
  bookingDate?: boolean
  startTime?: boolean
  endTime?: boolean
  status?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["testDriveBooking"]>

export type TestDriveBookingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  carId?: boolean
  userId?: boolean
  bookingDate?: boolean
  startTime?: boolean
  endTime?: boolean
  status?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["testDriveBooking"]>

export type TestDriveBookingSelectScalar = {
  id?: boolean
  carId?: boolean
  userId?: boolean
  bookingDate?: boolean
  startTime?: boolean
  endTime?: boolean
  status?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TestDriveBookingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "carId" | "userId" | "bookingDate" | "startTime" | "endTime" | "status" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["testDriveBooking"]>
export type TestDriveBookingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TestDriveBookingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TestDriveBookingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $TestDriveBookingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TestDriveBooking"
  objects: {
    car: Prisma.$CarPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    carId: string
    userId: string
    bookingDate: Date
    startTime: string
    endTime: string
    status: $Enums.BookingStatus
    notes: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["testDriveBooking"]>
  composites: {}
}

export type TestDriveBookingGetPayload<S extends boolean | null | undefined | TestDriveBookingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload, S>

export type TestDriveBookingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TestDriveBookingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TestDriveBookingCountAggregateInputType | true
  }

export interface TestDriveBookingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestDriveBooking'], meta: { name: 'TestDriveBooking' } }
  /**
   * Find zero or one TestDriveBooking that matches the filter.
   * @param {TestDriveBookingFindUniqueArgs} args - Arguments to find a TestDriveBooking
   * @example
   * // Get one TestDriveBooking
   * const testDriveBooking = await prisma.testDriveBooking.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TestDriveBookingFindUniqueArgs>(args: Prisma.SelectSubset<T, TestDriveBookingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TestDriveBookingClient<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TestDriveBooking that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TestDriveBookingFindUniqueOrThrowArgs} args - Arguments to find a TestDriveBooking
   * @example
   * // Get one TestDriveBooking
   * const testDriveBooking = await prisma.testDriveBooking.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TestDriveBookingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TestDriveBookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TestDriveBookingClient<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TestDriveBooking that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestDriveBookingFindFirstArgs} args - Arguments to find a TestDriveBooking
   * @example
   * // Get one TestDriveBooking
   * const testDriveBooking = await prisma.testDriveBooking.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TestDriveBookingFindFirstArgs>(args?: Prisma.SelectSubset<T, TestDriveBookingFindFirstArgs<ExtArgs>>): Prisma.Prisma__TestDriveBookingClient<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TestDriveBooking that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestDriveBookingFindFirstOrThrowArgs} args - Arguments to find a TestDriveBooking
   * @example
   * // Get one TestDriveBooking
   * const testDriveBooking = await prisma.testDriveBooking.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TestDriveBookingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TestDriveBookingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TestDriveBookingClient<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TestDriveBookings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestDriveBookingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TestDriveBookings
   * const testDriveBookings = await prisma.testDriveBooking.findMany()
   * 
   * // Get first 10 TestDriveBookings
   * const testDriveBookings = await prisma.testDriveBooking.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const testDriveBookingWithIdOnly = await prisma.testDriveBooking.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TestDriveBookingFindManyArgs>(args?: Prisma.SelectSubset<T, TestDriveBookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TestDriveBooking.
   * @param {TestDriveBookingCreateArgs} args - Arguments to create a TestDriveBooking.
   * @example
   * // Create one TestDriveBooking
   * const TestDriveBooking = await prisma.testDriveBooking.create({
   *   data: {
   *     // ... data to create a TestDriveBooking
   *   }
   * })
   * 
   */
  create<T extends TestDriveBookingCreateArgs>(args: Prisma.SelectSubset<T, TestDriveBookingCreateArgs<ExtArgs>>): Prisma.Prisma__TestDriveBookingClient<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TestDriveBookings.
   * @param {TestDriveBookingCreateManyArgs} args - Arguments to create many TestDriveBookings.
   * @example
   * // Create many TestDriveBookings
   * const testDriveBooking = await prisma.testDriveBooking.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TestDriveBookingCreateManyArgs>(args?: Prisma.SelectSubset<T, TestDriveBookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TestDriveBookings and returns the data saved in the database.
   * @param {TestDriveBookingCreateManyAndReturnArgs} args - Arguments to create many TestDriveBookings.
   * @example
   * // Create many TestDriveBookings
   * const testDriveBooking = await prisma.testDriveBooking.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TestDriveBookings and only return the `id`
   * const testDriveBookingWithIdOnly = await prisma.testDriveBooking.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TestDriveBookingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TestDriveBookingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TestDriveBooking.
   * @param {TestDriveBookingDeleteArgs} args - Arguments to delete one TestDriveBooking.
   * @example
   * // Delete one TestDriveBooking
   * const TestDriveBooking = await prisma.testDriveBooking.delete({
   *   where: {
   *     // ... filter to delete one TestDriveBooking
   *   }
   * })
   * 
   */
  delete<T extends TestDriveBookingDeleteArgs>(args: Prisma.SelectSubset<T, TestDriveBookingDeleteArgs<ExtArgs>>): Prisma.Prisma__TestDriveBookingClient<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TestDriveBooking.
   * @param {TestDriveBookingUpdateArgs} args - Arguments to update one TestDriveBooking.
   * @example
   * // Update one TestDriveBooking
   * const testDriveBooking = await prisma.testDriveBooking.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TestDriveBookingUpdateArgs>(args: Prisma.SelectSubset<T, TestDriveBookingUpdateArgs<ExtArgs>>): Prisma.Prisma__TestDriveBookingClient<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TestDriveBookings.
   * @param {TestDriveBookingDeleteManyArgs} args - Arguments to filter TestDriveBookings to delete.
   * @example
   * // Delete a few TestDriveBookings
   * const { count } = await prisma.testDriveBooking.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TestDriveBookingDeleteManyArgs>(args?: Prisma.SelectSubset<T, TestDriveBookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TestDriveBookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestDriveBookingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TestDriveBookings
   * const testDriveBooking = await prisma.testDriveBooking.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TestDriveBookingUpdateManyArgs>(args: Prisma.SelectSubset<T, TestDriveBookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TestDriveBookings and returns the data updated in the database.
   * @param {TestDriveBookingUpdateManyAndReturnArgs} args - Arguments to update many TestDriveBookings.
   * @example
   * // Update many TestDriveBookings
   * const testDriveBooking = await prisma.testDriveBooking.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TestDriveBookings and only return the `id`
   * const testDriveBookingWithIdOnly = await prisma.testDriveBooking.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TestDriveBookingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TestDriveBookingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TestDriveBooking.
   * @param {TestDriveBookingUpsertArgs} args - Arguments to update or create a TestDriveBooking.
   * @example
   * // Update or create a TestDriveBooking
   * const testDriveBooking = await prisma.testDriveBooking.upsert({
   *   create: {
   *     // ... data to create a TestDriveBooking
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TestDriveBooking we want to update
   *   }
   * })
   */
  upsert<T extends TestDriveBookingUpsertArgs>(args: Prisma.SelectSubset<T, TestDriveBookingUpsertArgs<ExtArgs>>): Prisma.Prisma__TestDriveBookingClient<runtime.Types.Result.GetResult<Prisma.$TestDriveBookingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TestDriveBookings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestDriveBookingCountArgs} args - Arguments to filter TestDriveBookings to count.
   * @example
   * // Count the number of TestDriveBookings
   * const count = await prisma.testDriveBooking.count({
   *   where: {
   *     // ... the filter for the TestDriveBookings we want to count
   *   }
   * })
  **/
  count<T extends TestDriveBookingCountArgs>(
    args?: Prisma.Subset<T, TestDriveBookingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TestDriveBookingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TestDriveBooking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestDriveBookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TestDriveBookingAggregateArgs>(args: Prisma.Subset<T, TestDriveBookingAggregateArgs>): Prisma.PrismaPromise<GetTestDriveBookingAggregateType<T>>

  /**
   * Group by TestDriveBooking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TestDriveBookingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TestDriveBookingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TestDriveBookingGroupByArgs['orderBy'] }
      : { orderBy?: TestDriveBookingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TestDriveBookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestDriveBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TestDriveBooking model
 */
readonly fields: TestDriveBookingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TestDriveBooking.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TestDriveBookingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  car<T extends Prisma.CarDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CarDefaultArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TestDriveBooking model
 */
export interface TestDriveBookingFieldRefs {
  readonly id: Prisma.FieldRef<"TestDriveBooking", 'String'>
  readonly carId: Prisma.FieldRef<"TestDriveBooking", 'String'>
  readonly userId: Prisma.FieldRef<"TestDriveBooking", 'String'>
  readonly bookingDate: Prisma.FieldRef<"TestDriveBooking", 'DateTime'>
  readonly startTime: Prisma.FieldRef<"TestDriveBooking", 'String'>
  readonly endTime: Prisma.FieldRef<"TestDriveBooking", 'String'>
  readonly status: Prisma.FieldRef<"TestDriveBooking", 'BookingStatus'>
  readonly notes: Prisma.FieldRef<"TestDriveBooking", 'String'>
  readonly createdAt: Prisma.FieldRef<"TestDriveBooking", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TestDriveBooking", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TestDriveBooking findUnique
 */
export type TestDriveBookingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  /**
   * Filter, which TestDriveBooking to fetch.
   */
  where: Prisma.TestDriveBookingWhereUniqueInput
}

/**
 * TestDriveBooking findUniqueOrThrow
 */
export type TestDriveBookingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  /**
   * Filter, which TestDriveBooking to fetch.
   */
  where: Prisma.TestDriveBookingWhereUniqueInput
}

/**
 * TestDriveBooking findFirst
 */
export type TestDriveBookingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  /**
   * Filter, which TestDriveBooking to fetch.
   */
  where?: Prisma.TestDriveBookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestDriveBookings to fetch.
   */
  orderBy?: Prisma.TestDriveBookingOrderByWithRelationInput | Prisma.TestDriveBookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TestDriveBookings.
   */
  cursor?: Prisma.TestDriveBookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestDriveBookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestDriveBookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TestDriveBookings.
   */
  distinct?: Prisma.TestDriveBookingScalarFieldEnum | Prisma.TestDriveBookingScalarFieldEnum[]
}

/**
 * TestDriveBooking findFirstOrThrow
 */
export type TestDriveBookingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  /**
   * Filter, which TestDriveBooking to fetch.
   */
  where?: Prisma.TestDriveBookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestDriveBookings to fetch.
   */
  orderBy?: Prisma.TestDriveBookingOrderByWithRelationInput | Prisma.TestDriveBookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TestDriveBookings.
   */
  cursor?: Prisma.TestDriveBookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestDriveBookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestDriveBookings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TestDriveBookings.
   */
  distinct?: Prisma.TestDriveBookingScalarFieldEnum | Prisma.TestDriveBookingScalarFieldEnum[]
}

/**
 * TestDriveBooking findMany
 */
export type TestDriveBookingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  /**
   * Filter, which TestDriveBookings to fetch.
   */
  where?: Prisma.TestDriveBookingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TestDriveBookings to fetch.
   */
  orderBy?: Prisma.TestDriveBookingOrderByWithRelationInput | Prisma.TestDriveBookingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TestDriveBookings.
   */
  cursor?: Prisma.TestDriveBookingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TestDriveBookings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TestDriveBookings.
   */
  skip?: number
  distinct?: Prisma.TestDriveBookingScalarFieldEnum | Prisma.TestDriveBookingScalarFieldEnum[]
}

/**
 * TestDriveBooking create
 */
export type TestDriveBookingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  /**
   * The data needed to create a TestDriveBooking.
   */
  data: Prisma.XOR<Prisma.TestDriveBookingCreateInput, Prisma.TestDriveBookingUncheckedCreateInput>
}

/**
 * TestDriveBooking createMany
 */
export type TestDriveBookingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TestDriveBookings.
   */
  data: Prisma.TestDriveBookingCreateManyInput | Prisma.TestDriveBookingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TestDriveBooking createManyAndReturn
 */
export type TestDriveBookingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * The data used to create many TestDriveBookings.
   */
  data: Prisma.TestDriveBookingCreateManyInput | Prisma.TestDriveBookingCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TestDriveBooking update
 */
export type TestDriveBookingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  /**
   * The data needed to update a TestDriveBooking.
   */
  data: Prisma.XOR<Prisma.TestDriveBookingUpdateInput, Prisma.TestDriveBookingUncheckedUpdateInput>
  /**
   * Choose, which TestDriveBooking to update.
   */
  where: Prisma.TestDriveBookingWhereUniqueInput
}

/**
 * TestDriveBooking updateMany
 */
export type TestDriveBookingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TestDriveBookings.
   */
  data: Prisma.XOR<Prisma.TestDriveBookingUpdateManyMutationInput, Prisma.TestDriveBookingUncheckedUpdateManyInput>
  /**
   * Filter which TestDriveBookings to update
   */
  where?: Prisma.TestDriveBookingWhereInput
  /**
   * Limit how many TestDriveBookings to update.
   */
  limit?: number
}

/**
 * TestDriveBooking updateManyAndReturn
 */
export type TestDriveBookingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * The data used to update TestDriveBookings.
   */
  data: Prisma.XOR<Prisma.TestDriveBookingUpdateManyMutationInput, Prisma.TestDriveBookingUncheckedUpdateManyInput>
  /**
   * Filter which TestDriveBookings to update
   */
  where?: Prisma.TestDriveBookingWhereInput
  /**
   * Limit how many TestDriveBookings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TestDriveBooking upsert
 */
export type TestDriveBookingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  /**
   * The filter to search for the TestDriveBooking to update in case it exists.
   */
  where: Prisma.TestDriveBookingWhereUniqueInput
  /**
   * In case the TestDriveBooking found by the `where` argument doesn't exist, create a new TestDriveBooking with this data.
   */
  create: Prisma.XOR<Prisma.TestDriveBookingCreateInput, Prisma.TestDriveBookingUncheckedCreateInput>
  /**
   * In case the TestDriveBooking was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TestDriveBookingUpdateInput, Prisma.TestDriveBookingUncheckedUpdateInput>
}

/**
 * TestDriveBooking delete
 */
export type TestDriveBookingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
  /**
   * Filter which TestDriveBooking to delete.
   */
  where: Prisma.TestDriveBookingWhereUniqueInput
}

/**
 * TestDriveBooking deleteMany
 */
export type TestDriveBookingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TestDriveBookings to delete
   */
  where?: Prisma.TestDriveBookingWhereInput
  /**
   * Limit how many TestDriveBookings to delete.
   */
  limit?: number
}

/**
 * TestDriveBooking without action
 */
export type TestDriveBookingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TestDriveBooking
   */
  select?: Prisma.TestDriveBookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TestDriveBooking
   */
  omit?: Prisma.TestDriveBookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TestDriveBookingInclude<ExtArgs> | null
}
