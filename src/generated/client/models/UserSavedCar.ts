
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `UserSavedCar` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model UserSavedCar
 * 
 */
export type UserSavedCarModel = runtime.Types.Result.DefaultSelection<Prisma.$UserSavedCarPayload>

export type AggregateUserSavedCar = {
  _count: UserSavedCarCountAggregateOutputType | null
  _min: UserSavedCarMinAggregateOutputType | null
  _max: UserSavedCarMaxAggregateOutputType | null
}

export type UserSavedCarMinAggregateOutputType = {
  id: string | null
  userId: string | null
  carId: string | null
  savedAt: Date | null
}

export type UserSavedCarMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  carId: string | null
  savedAt: Date | null
}

export type UserSavedCarCountAggregateOutputType = {
  id: number
  userId: number
  carId: number
  savedAt: number
  _all: number
}


export type UserSavedCarMinAggregateInputType = {
  id?: true
  userId?: true
  carId?: true
  savedAt?: true
}

export type UserSavedCarMaxAggregateInputType = {
  id?: true
  userId?: true
  carId?: true
  savedAt?: true
}

export type UserSavedCarCountAggregateInputType = {
  id?: true
  userId?: true
  carId?: true
  savedAt?: true
  _all?: true
}

export type UserSavedCarAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserSavedCar to aggregate.
   */
  where?: Prisma.UserSavedCarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSavedCars to fetch.
   */
  orderBy?: Prisma.UserSavedCarOrderByWithRelationInput | Prisma.UserSavedCarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserSavedCarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSavedCars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSavedCars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserSavedCars
  **/
  _count?: true | UserSavedCarCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserSavedCarMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserSavedCarMaxAggregateInputType
}

export type GetUserSavedCarAggregateType<T extends UserSavedCarAggregateArgs> = {
      [P in keyof T & keyof AggregateUserSavedCar]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserSavedCar[P]>
    : Prisma.GetScalarType<T[P], AggregateUserSavedCar[P]>
}




export type UserSavedCarGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserSavedCarWhereInput
  orderBy?: Prisma.UserSavedCarOrderByWithAggregationInput | Prisma.UserSavedCarOrderByWithAggregationInput[]
  by: Prisma.UserSavedCarScalarFieldEnum[] | Prisma.UserSavedCarScalarFieldEnum
  having?: Prisma.UserSavedCarScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserSavedCarCountAggregateInputType | true
  _min?: UserSavedCarMinAggregateInputType
  _max?: UserSavedCarMaxAggregateInputType
}

export type UserSavedCarGroupByOutputType = {
  id: string
  userId: string
  carId: string
  savedAt: Date
  _count: UserSavedCarCountAggregateOutputType | null
  _min: UserSavedCarMinAggregateOutputType | null
  _max: UserSavedCarMaxAggregateOutputType | null
}

type GetUserSavedCarGroupByPayload<T extends UserSavedCarGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserSavedCarGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserSavedCarGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserSavedCarGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserSavedCarGroupByOutputType[P]>
      }
    >
  > 



export type UserSavedCarWhereInput = {
  AND?: Prisma.UserSavedCarWhereInput | Prisma.UserSavedCarWhereInput[]
  OR?: Prisma.UserSavedCarWhereInput[]
  NOT?: Prisma.UserSavedCarWhereInput | Prisma.UserSavedCarWhereInput[]
  id?: Prisma.StringFilter<"UserSavedCar"> | string
  userId?: Prisma.StringFilter<"UserSavedCar"> | string
  carId?: Prisma.StringFilter<"UserSavedCar"> | string
  savedAt?: Prisma.DateTimeFilter<"UserSavedCar"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  car?: Prisma.XOR<Prisma.CarScalarRelationFilter, Prisma.CarWhereInput>
}

export type UserSavedCarOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  savedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  car?: Prisma.CarOrderByWithRelationInput
}

export type UserSavedCarWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_carId?: Prisma.UserSavedCarUserIdCarIdCompoundUniqueInput
  AND?: Prisma.UserSavedCarWhereInput | Prisma.UserSavedCarWhereInput[]
  OR?: Prisma.UserSavedCarWhereInput[]
  NOT?: Prisma.UserSavedCarWhereInput | Prisma.UserSavedCarWhereInput[]
  userId?: Prisma.StringFilter<"UserSavedCar"> | string
  carId?: Prisma.StringFilter<"UserSavedCar"> | string
  savedAt?: Prisma.DateTimeFilter<"UserSavedCar"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  car?: Prisma.XOR<Prisma.CarScalarRelationFilter, Prisma.CarWhereInput>
}, "id" | "userId_carId">

export type UserSavedCarOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  savedAt?: Prisma.SortOrder
  _count?: Prisma.UserSavedCarCountOrderByAggregateInput
  _max?: Prisma.UserSavedCarMaxOrderByAggregateInput
  _min?: Prisma.UserSavedCarMinOrderByAggregateInput
}

export type UserSavedCarScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserSavedCarScalarWhereWithAggregatesInput | Prisma.UserSavedCarScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserSavedCarScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserSavedCarScalarWhereWithAggregatesInput | Prisma.UserSavedCarScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserSavedCar"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserSavedCar"> | string
  carId?: Prisma.StringWithAggregatesFilter<"UserSavedCar"> | string
  savedAt?: Prisma.DateTimeWithAggregatesFilter<"UserSavedCar"> | Date | string
}

export type UserSavedCarCreateInput = {
  id?: string
  savedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSavedCarsInput
  car: Prisma.CarCreateNestedOneWithoutSavedByInput
}

export type UserSavedCarUncheckedCreateInput = {
  id?: string
  userId: string
  carId: string
  savedAt?: Date | string
}

export type UserSavedCarUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSavedCarsNestedInput
  car?: Prisma.CarUpdateOneRequiredWithoutSavedByNestedInput
}

export type UserSavedCarUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  carId?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSavedCarCreateManyInput = {
  id?: string
  userId: string
  carId: string
  savedAt?: Date | string
}

export type UserSavedCarUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSavedCarUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  carId?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSavedCarListRelationFilter = {
  every?: Prisma.UserSavedCarWhereInput
  some?: Prisma.UserSavedCarWhereInput
  none?: Prisma.UserSavedCarWhereInput
}

export type UserSavedCarOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserSavedCarUserIdCarIdCompoundUniqueInput = {
  userId: string
  carId: string
}

export type UserSavedCarCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  savedAt?: Prisma.SortOrder
}

export type UserSavedCarMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  savedAt?: Prisma.SortOrder
}

export type UserSavedCarMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  carId?: Prisma.SortOrder
  savedAt?: Prisma.SortOrder
}

export type UserSavedCarCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserSavedCarCreateWithoutUserInput, Prisma.UserSavedCarUncheckedCreateWithoutUserInput> | Prisma.UserSavedCarCreateWithoutUserInput[] | Prisma.UserSavedCarUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserSavedCarCreateOrConnectWithoutUserInput | Prisma.UserSavedCarCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserSavedCarCreateManyUserInputEnvelope
  connect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
}

export type UserSavedCarUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserSavedCarCreateWithoutUserInput, Prisma.UserSavedCarUncheckedCreateWithoutUserInput> | Prisma.UserSavedCarCreateWithoutUserInput[] | Prisma.UserSavedCarUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserSavedCarCreateOrConnectWithoutUserInput | Prisma.UserSavedCarCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserSavedCarCreateManyUserInputEnvelope
  connect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
}

export type UserSavedCarUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserSavedCarCreateWithoutUserInput, Prisma.UserSavedCarUncheckedCreateWithoutUserInput> | Prisma.UserSavedCarCreateWithoutUserInput[] | Prisma.UserSavedCarUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserSavedCarCreateOrConnectWithoutUserInput | Prisma.UserSavedCarCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserSavedCarUpsertWithWhereUniqueWithoutUserInput | Prisma.UserSavedCarUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserSavedCarCreateManyUserInputEnvelope
  set?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  disconnect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  delete?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  connect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  update?: Prisma.UserSavedCarUpdateWithWhereUniqueWithoutUserInput | Prisma.UserSavedCarUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserSavedCarUpdateManyWithWhereWithoutUserInput | Prisma.UserSavedCarUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserSavedCarScalarWhereInput | Prisma.UserSavedCarScalarWhereInput[]
}

export type UserSavedCarUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserSavedCarCreateWithoutUserInput, Prisma.UserSavedCarUncheckedCreateWithoutUserInput> | Prisma.UserSavedCarCreateWithoutUserInput[] | Prisma.UserSavedCarUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserSavedCarCreateOrConnectWithoutUserInput | Prisma.UserSavedCarCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserSavedCarUpsertWithWhereUniqueWithoutUserInput | Prisma.UserSavedCarUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserSavedCarCreateManyUserInputEnvelope
  set?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  disconnect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  delete?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  connect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  update?: Prisma.UserSavedCarUpdateWithWhereUniqueWithoutUserInput | Prisma.UserSavedCarUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserSavedCarUpdateManyWithWhereWithoutUserInput | Prisma.UserSavedCarUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserSavedCarScalarWhereInput | Prisma.UserSavedCarScalarWhereInput[]
}

export type UserSavedCarCreateNestedManyWithoutCarInput = {
  create?: Prisma.XOR<Prisma.UserSavedCarCreateWithoutCarInput, Prisma.UserSavedCarUncheckedCreateWithoutCarInput> | Prisma.UserSavedCarCreateWithoutCarInput[] | Prisma.UserSavedCarUncheckedCreateWithoutCarInput[]
  connectOrCreate?: Prisma.UserSavedCarCreateOrConnectWithoutCarInput | Prisma.UserSavedCarCreateOrConnectWithoutCarInput[]
  createMany?: Prisma.UserSavedCarCreateManyCarInputEnvelope
  connect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
}

export type UserSavedCarUncheckedCreateNestedManyWithoutCarInput = {
  create?: Prisma.XOR<Prisma.UserSavedCarCreateWithoutCarInput, Prisma.UserSavedCarUncheckedCreateWithoutCarInput> | Prisma.UserSavedCarCreateWithoutCarInput[] | Prisma.UserSavedCarUncheckedCreateWithoutCarInput[]
  connectOrCreate?: Prisma.UserSavedCarCreateOrConnectWithoutCarInput | Prisma.UserSavedCarCreateOrConnectWithoutCarInput[]
  createMany?: Prisma.UserSavedCarCreateManyCarInputEnvelope
  connect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
}

export type UserSavedCarUpdateManyWithoutCarNestedInput = {
  create?: Prisma.XOR<Prisma.UserSavedCarCreateWithoutCarInput, Prisma.UserSavedCarUncheckedCreateWithoutCarInput> | Prisma.UserSavedCarCreateWithoutCarInput[] | Prisma.UserSavedCarUncheckedCreateWithoutCarInput[]
  connectOrCreate?: Prisma.UserSavedCarCreateOrConnectWithoutCarInput | Prisma.UserSavedCarCreateOrConnectWithoutCarInput[]
  upsert?: Prisma.UserSavedCarUpsertWithWhereUniqueWithoutCarInput | Prisma.UserSavedCarUpsertWithWhereUniqueWithoutCarInput[]
  createMany?: Prisma.UserSavedCarCreateManyCarInputEnvelope
  set?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  disconnect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  delete?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  connect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  update?: Prisma.UserSavedCarUpdateWithWhereUniqueWithoutCarInput | Prisma.UserSavedCarUpdateWithWhereUniqueWithoutCarInput[]
  updateMany?: Prisma.UserSavedCarUpdateManyWithWhereWithoutCarInput | Prisma.UserSavedCarUpdateManyWithWhereWithoutCarInput[]
  deleteMany?: Prisma.UserSavedCarScalarWhereInput | Prisma.UserSavedCarScalarWhereInput[]
}

export type UserSavedCarUncheckedUpdateManyWithoutCarNestedInput = {
  create?: Prisma.XOR<Prisma.UserSavedCarCreateWithoutCarInput, Prisma.UserSavedCarUncheckedCreateWithoutCarInput> | Prisma.UserSavedCarCreateWithoutCarInput[] | Prisma.UserSavedCarUncheckedCreateWithoutCarInput[]
  connectOrCreate?: Prisma.UserSavedCarCreateOrConnectWithoutCarInput | Prisma.UserSavedCarCreateOrConnectWithoutCarInput[]
  upsert?: Prisma.UserSavedCarUpsertWithWhereUniqueWithoutCarInput | Prisma.UserSavedCarUpsertWithWhereUniqueWithoutCarInput[]
  createMany?: Prisma.UserSavedCarCreateManyCarInputEnvelope
  set?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  disconnect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  delete?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  connect?: Prisma.UserSavedCarWhereUniqueInput | Prisma.UserSavedCarWhereUniqueInput[]
  update?: Prisma.UserSavedCarUpdateWithWhereUniqueWithoutCarInput | Prisma.UserSavedCarUpdateWithWhereUniqueWithoutCarInput[]
  updateMany?: Prisma.UserSavedCarUpdateManyWithWhereWithoutCarInput | Prisma.UserSavedCarUpdateManyWithWhereWithoutCarInput[]
  deleteMany?: Prisma.UserSavedCarScalarWhereInput | Prisma.UserSavedCarScalarWhereInput[]
}

export type UserSavedCarCreateWithoutUserInput = {
  id?: string
  savedAt?: Date | string
  car: Prisma.CarCreateNestedOneWithoutSavedByInput
}

export type UserSavedCarUncheckedCreateWithoutUserInput = {
  id?: string
  carId: string
  savedAt?: Date | string
}

export type UserSavedCarCreateOrConnectWithoutUserInput = {
  where: Prisma.UserSavedCarWhereUniqueInput
  create: Prisma.XOR<Prisma.UserSavedCarCreateWithoutUserInput, Prisma.UserSavedCarUncheckedCreateWithoutUserInput>
}

export type UserSavedCarCreateManyUserInputEnvelope = {
  data: Prisma.UserSavedCarCreateManyUserInput | Prisma.UserSavedCarCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserSavedCarUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserSavedCarWhereUniqueInput
  update: Prisma.XOR<Prisma.UserSavedCarUpdateWithoutUserInput, Prisma.UserSavedCarUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserSavedCarCreateWithoutUserInput, Prisma.UserSavedCarUncheckedCreateWithoutUserInput>
}

export type UserSavedCarUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserSavedCarWhereUniqueInput
  data: Prisma.XOR<Prisma.UserSavedCarUpdateWithoutUserInput, Prisma.UserSavedCarUncheckedUpdateWithoutUserInput>
}

export type UserSavedCarUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserSavedCarScalarWhereInput
  data: Prisma.XOR<Prisma.UserSavedCarUpdateManyMutationInput, Prisma.UserSavedCarUncheckedUpdateManyWithoutUserInput>
}

export type UserSavedCarScalarWhereInput = {
  AND?: Prisma.UserSavedCarScalarWhereInput | Prisma.UserSavedCarScalarWhereInput[]
  OR?: Prisma.UserSavedCarScalarWhereInput[]
  NOT?: Prisma.UserSavedCarScalarWhereInput | Prisma.UserSavedCarScalarWhereInput[]
  id?: Prisma.StringFilter<"UserSavedCar"> | string
  userId?: Prisma.StringFilter<"UserSavedCar"> | string
  carId?: Prisma.StringFilter<"UserSavedCar"> | string
  savedAt?: Prisma.DateTimeFilter<"UserSavedCar"> | Date | string
}

export type UserSavedCarCreateWithoutCarInput = {
  id?: string
  savedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSavedCarsInput
}

export type UserSavedCarUncheckedCreateWithoutCarInput = {
  id?: string
  userId: string
  savedAt?: Date | string
}

export type UserSavedCarCreateOrConnectWithoutCarInput = {
  where: Prisma.UserSavedCarWhereUniqueInput
  create: Prisma.XOR<Prisma.UserSavedCarCreateWithoutCarInput, Prisma.UserSavedCarUncheckedCreateWithoutCarInput>
}

export type UserSavedCarCreateManyCarInputEnvelope = {
  data: Prisma.UserSavedCarCreateManyCarInput | Prisma.UserSavedCarCreateManyCarInput[]
  skipDuplicates?: boolean
}

export type UserSavedCarUpsertWithWhereUniqueWithoutCarInput = {
  where: Prisma.UserSavedCarWhereUniqueInput
  update: Prisma.XOR<Prisma.UserSavedCarUpdateWithoutCarInput, Prisma.UserSavedCarUncheckedUpdateWithoutCarInput>
  create: Prisma.XOR<Prisma.UserSavedCarCreateWithoutCarInput, Prisma.UserSavedCarUncheckedCreateWithoutCarInput>
}

export type UserSavedCarUpdateWithWhereUniqueWithoutCarInput = {
  where: Prisma.UserSavedCarWhereUniqueInput
  data: Prisma.XOR<Prisma.UserSavedCarUpdateWithoutCarInput, Prisma.UserSavedCarUncheckedUpdateWithoutCarInput>
}

export type UserSavedCarUpdateManyWithWhereWithoutCarInput = {
  where: Prisma.UserSavedCarScalarWhereInput
  data: Prisma.XOR<Prisma.UserSavedCarUpdateManyMutationInput, Prisma.UserSavedCarUncheckedUpdateManyWithoutCarInput>
}

export type UserSavedCarCreateManyUserInput = {
  id?: string
  carId: string
  savedAt?: Date | string
}

export type UserSavedCarUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  car?: Prisma.CarUpdateOneRequiredWithoutSavedByNestedInput
}

export type UserSavedCarUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  carId?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSavedCarUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  carId?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSavedCarCreateManyCarInput = {
  id?: string
  userId: string
  savedAt?: Date | string
}

export type UserSavedCarUpdateWithoutCarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSavedCarsNestedInput
}

export type UserSavedCarUncheckedUpdateWithoutCarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserSavedCarUncheckedUpdateManyWithoutCarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  savedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserSavedCarSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  carId?: boolean
  savedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSavedCar"]>

export type UserSavedCarSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  carId?: boolean
  savedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSavedCar"]>

export type UserSavedCarSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  carId?: boolean
  savedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSavedCar"]>

export type UserSavedCarSelectScalar = {
  id?: boolean
  userId?: boolean
  carId?: boolean
  savedAt?: boolean
}

export type UserSavedCarOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "carId" | "savedAt", ExtArgs["result"]["userSavedCar"]>
export type UserSavedCarInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
}
export type UserSavedCarIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
}
export type UserSavedCarIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  car?: boolean | Prisma.CarDefaultArgs<ExtArgs>
}

export type $UserSavedCarPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserSavedCar"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    car: Prisma.$CarPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    carId: string
    savedAt: Date
  }, ExtArgs["result"]["userSavedCar"]>
  composites: {}
}

export type UserSavedCarGetPayload<S extends boolean | null | undefined | UserSavedCarDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload, S>

export type UserSavedCarCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserSavedCarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserSavedCarCountAggregateInputType | true
  }

export interface UserSavedCarDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSavedCar'], meta: { name: 'UserSavedCar' } }
  /**
   * Find zero or one UserSavedCar that matches the filter.
   * @param {UserSavedCarFindUniqueArgs} args - Arguments to find a UserSavedCar
   * @example
   * // Get one UserSavedCar
   * const userSavedCar = await prisma.userSavedCar.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserSavedCarFindUniqueArgs>(args: Prisma.SelectSubset<T, UserSavedCarFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserSavedCarClient<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserSavedCar that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserSavedCarFindUniqueOrThrowArgs} args - Arguments to find a UserSavedCar
   * @example
   * // Get one UserSavedCar
   * const userSavedCar = await prisma.userSavedCar.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserSavedCarFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserSavedCarFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserSavedCarClient<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserSavedCar that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSavedCarFindFirstArgs} args - Arguments to find a UserSavedCar
   * @example
   * // Get one UserSavedCar
   * const userSavedCar = await prisma.userSavedCar.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserSavedCarFindFirstArgs>(args?: Prisma.SelectSubset<T, UserSavedCarFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserSavedCarClient<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserSavedCar that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSavedCarFindFirstOrThrowArgs} args - Arguments to find a UserSavedCar
   * @example
   * // Get one UserSavedCar
   * const userSavedCar = await prisma.userSavedCar.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserSavedCarFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserSavedCarFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserSavedCarClient<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserSavedCars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSavedCarFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserSavedCars
   * const userSavedCars = await prisma.userSavedCar.findMany()
   * 
   * // Get first 10 UserSavedCars
   * const userSavedCars = await prisma.userSavedCar.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userSavedCarWithIdOnly = await prisma.userSavedCar.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserSavedCarFindManyArgs>(args?: Prisma.SelectSubset<T, UserSavedCarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserSavedCar.
   * @param {UserSavedCarCreateArgs} args - Arguments to create a UserSavedCar.
   * @example
   * // Create one UserSavedCar
   * const UserSavedCar = await prisma.userSavedCar.create({
   *   data: {
   *     // ... data to create a UserSavedCar
   *   }
   * })
   * 
   */
  create<T extends UserSavedCarCreateArgs>(args: Prisma.SelectSubset<T, UserSavedCarCreateArgs<ExtArgs>>): Prisma.Prisma__UserSavedCarClient<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserSavedCars.
   * @param {UserSavedCarCreateManyArgs} args - Arguments to create many UserSavedCars.
   * @example
   * // Create many UserSavedCars
   * const userSavedCar = await prisma.userSavedCar.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserSavedCarCreateManyArgs>(args?: Prisma.SelectSubset<T, UserSavedCarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserSavedCars and returns the data saved in the database.
   * @param {UserSavedCarCreateManyAndReturnArgs} args - Arguments to create many UserSavedCars.
   * @example
   * // Create many UserSavedCars
   * const userSavedCar = await prisma.userSavedCar.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserSavedCars and only return the `id`
   * const userSavedCarWithIdOnly = await prisma.userSavedCar.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserSavedCarCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserSavedCarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserSavedCar.
   * @param {UserSavedCarDeleteArgs} args - Arguments to delete one UserSavedCar.
   * @example
   * // Delete one UserSavedCar
   * const UserSavedCar = await prisma.userSavedCar.delete({
   *   where: {
   *     // ... filter to delete one UserSavedCar
   *   }
   * })
   * 
   */
  delete<T extends UserSavedCarDeleteArgs>(args: Prisma.SelectSubset<T, UserSavedCarDeleteArgs<ExtArgs>>): Prisma.Prisma__UserSavedCarClient<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserSavedCar.
   * @param {UserSavedCarUpdateArgs} args - Arguments to update one UserSavedCar.
   * @example
   * // Update one UserSavedCar
   * const userSavedCar = await prisma.userSavedCar.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserSavedCarUpdateArgs>(args: Prisma.SelectSubset<T, UserSavedCarUpdateArgs<ExtArgs>>): Prisma.Prisma__UserSavedCarClient<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserSavedCars.
   * @param {UserSavedCarDeleteManyArgs} args - Arguments to filter UserSavedCars to delete.
   * @example
   * // Delete a few UserSavedCars
   * const { count } = await prisma.userSavedCar.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserSavedCarDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserSavedCarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserSavedCars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSavedCarUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserSavedCars
   * const userSavedCar = await prisma.userSavedCar.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserSavedCarUpdateManyArgs>(args: Prisma.SelectSubset<T, UserSavedCarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserSavedCars and returns the data updated in the database.
   * @param {UserSavedCarUpdateManyAndReturnArgs} args - Arguments to update many UserSavedCars.
   * @example
   * // Update many UserSavedCars
   * const userSavedCar = await prisma.userSavedCar.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserSavedCars and only return the `id`
   * const userSavedCarWithIdOnly = await prisma.userSavedCar.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserSavedCarUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserSavedCarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserSavedCar.
   * @param {UserSavedCarUpsertArgs} args - Arguments to update or create a UserSavedCar.
   * @example
   * // Update or create a UserSavedCar
   * const userSavedCar = await prisma.userSavedCar.upsert({
   *   create: {
   *     // ... data to create a UserSavedCar
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserSavedCar we want to update
   *   }
   * })
   */
  upsert<T extends UserSavedCarUpsertArgs>(args: Prisma.SelectSubset<T, UserSavedCarUpsertArgs<ExtArgs>>): Prisma.Prisma__UserSavedCarClient<runtime.Types.Result.GetResult<Prisma.$UserSavedCarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserSavedCars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSavedCarCountArgs} args - Arguments to filter UserSavedCars to count.
   * @example
   * // Count the number of UserSavedCars
   * const count = await prisma.userSavedCar.count({
   *   where: {
   *     // ... the filter for the UserSavedCars we want to count
   *   }
   * })
  **/
  count<T extends UserSavedCarCountArgs>(
    args?: Prisma.Subset<T, UserSavedCarCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserSavedCarCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserSavedCar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSavedCarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserSavedCarAggregateArgs>(args: Prisma.Subset<T, UserSavedCarAggregateArgs>): Prisma.PrismaPromise<GetUserSavedCarAggregateType<T>>

  /**
   * Group by UserSavedCar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSavedCarGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserSavedCarGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserSavedCarGroupByArgs['orderBy'] }
      : { orderBy?: UserSavedCarGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserSavedCarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSavedCarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserSavedCar model
 */
readonly fields: UserSavedCarFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserSavedCar.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserSavedCarClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  car<T extends Prisma.CarDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CarDefaultArgs<ExtArgs>>): Prisma.Prisma__CarClient<runtime.Types.Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserSavedCar model
 */
export interface UserSavedCarFieldRefs {
  readonly id: Prisma.FieldRef<"UserSavedCar", 'String'>
  readonly userId: Prisma.FieldRef<"UserSavedCar", 'String'>
  readonly carId: Prisma.FieldRef<"UserSavedCar", 'String'>
  readonly savedAt: Prisma.FieldRef<"UserSavedCar", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserSavedCar findUnique
 */
export type UserSavedCarFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  /**
   * Filter, which UserSavedCar to fetch.
   */
  where: Prisma.UserSavedCarWhereUniqueInput
}

/**
 * UserSavedCar findUniqueOrThrow
 */
export type UserSavedCarFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  /**
   * Filter, which UserSavedCar to fetch.
   */
  where: Prisma.UserSavedCarWhereUniqueInput
}

/**
 * UserSavedCar findFirst
 */
export type UserSavedCarFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  /**
   * Filter, which UserSavedCar to fetch.
   */
  where?: Prisma.UserSavedCarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSavedCars to fetch.
   */
  orderBy?: Prisma.UserSavedCarOrderByWithRelationInput | Prisma.UserSavedCarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserSavedCars.
   */
  cursor?: Prisma.UserSavedCarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSavedCars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSavedCars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserSavedCars.
   */
  distinct?: Prisma.UserSavedCarScalarFieldEnum | Prisma.UserSavedCarScalarFieldEnum[]
}

/**
 * UserSavedCar findFirstOrThrow
 */
export type UserSavedCarFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  /**
   * Filter, which UserSavedCar to fetch.
   */
  where?: Prisma.UserSavedCarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSavedCars to fetch.
   */
  orderBy?: Prisma.UserSavedCarOrderByWithRelationInput | Prisma.UserSavedCarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserSavedCars.
   */
  cursor?: Prisma.UserSavedCarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSavedCars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSavedCars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserSavedCars.
   */
  distinct?: Prisma.UserSavedCarScalarFieldEnum | Prisma.UserSavedCarScalarFieldEnum[]
}

/**
 * UserSavedCar findMany
 */
export type UserSavedCarFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  /**
   * Filter, which UserSavedCars to fetch.
   */
  where?: Prisma.UserSavedCarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSavedCars to fetch.
   */
  orderBy?: Prisma.UserSavedCarOrderByWithRelationInput | Prisma.UserSavedCarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserSavedCars.
   */
  cursor?: Prisma.UserSavedCarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSavedCars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSavedCars.
   */
  skip?: number
  distinct?: Prisma.UserSavedCarScalarFieldEnum | Prisma.UserSavedCarScalarFieldEnum[]
}

/**
 * UserSavedCar create
 */
export type UserSavedCarCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  /**
   * The data needed to create a UserSavedCar.
   */
  data: Prisma.XOR<Prisma.UserSavedCarCreateInput, Prisma.UserSavedCarUncheckedCreateInput>
}

/**
 * UserSavedCar createMany
 */
export type UserSavedCarCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserSavedCars.
   */
  data: Prisma.UserSavedCarCreateManyInput | Prisma.UserSavedCarCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserSavedCar createManyAndReturn
 */
export type UserSavedCarCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * The data used to create many UserSavedCars.
   */
  data: Prisma.UserSavedCarCreateManyInput | Prisma.UserSavedCarCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserSavedCar update
 */
export type UserSavedCarUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  /**
   * The data needed to update a UserSavedCar.
   */
  data: Prisma.XOR<Prisma.UserSavedCarUpdateInput, Prisma.UserSavedCarUncheckedUpdateInput>
  /**
   * Choose, which UserSavedCar to update.
   */
  where: Prisma.UserSavedCarWhereUniqueInput
}

/**
 * UserSavedCar updateMany
 */
export type UserSavedCarUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserSavedCars.
   */
  data: Prisma.XOR<Prisma.UserSavedCarUpdateManyMutationInput, Prisma.UserSavedCarUncheckedUpdateManyInput>
  /**
   * Filter which UserSavedCars to update
   */
  where?: Prisma.UserSavedCarWhereInput
  /**
   * Limit how many UserSavedCars to update.
   */
  limit?: number
}

/**
 * UserSavedCar updateManyAndReturn
 */
export type UserSavedCarUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * The data used to update UserSavedCars.
   */
  data: Prisma.XOR<Prisma.UserSavedCarUpdateManyMutationInput, Prisma.UserSavedCarUncheckedUpdateManyInput>
  /**
   * Filter which UserSavedCars to update
   */
  where?: Prisma.UserSavedCarWhereInput
  /**
   * Limit how many UserSavedCars to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserSavedCar upsert
 */
export type UserSavedCarUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  /**
   * The filter to search for the UserSavedCar to update in case it exists.
   */
  where: Prisma.UserSavedCarWhereUniqueInput
  /**
   * In case the UserSavedCar found by the `where` argument doesn't exist, create a new UserSavedCar with this data.
   */
  create: Prisma.XOR<Prisma.UserSavedCarCreateInput, Prisma.UserSavedCarUncheckedCreateInput>
  /**
   * In case the UserSavedCar was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserSavedCarUpdateInput, Prisma.UserSavedCarUncheckedUpdateInput>
}

/**
 * UserSavedCar delete
 */
export type UserSavedCarDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
  /**
   * Filter which UserSavedCar to delete.
   */
  where: Prisma.UserSavedCarWhereUniqueInput
}

/**
 * UserSavedCar deleteMany
 */
export type UserSavedCarDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserSavedCars to delete
   */
  where?: Prisma.UserSavedCarWhereInput
  /**
   * Limit how many UserSavedCars to delete.
   */
  limit?: number
}

/**
 * UserSavedCar without action
 */
export type UserSavedCarDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSavedCar
   */
  select?: Prisma.UserSavedCarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSavedCar
   */
  omit?: Prisma.UserSavedCarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSavedCarInclude<ExtArgs> | null
}
