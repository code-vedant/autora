
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `WorkingHour` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model WorkingHour
 * 
 */
export type WorkingHourModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkingHourPayload>

export type AggregateWorkingHour = {
  _count: WorkingHourCountAggregateOutputType | null
  _min: WorkingHourMinAggregateOutputType | null
  _max: WorkingHourMaxAggregateOutputType | null
}

export type WorkingHourMinAggregateOutputType = {
  id: string | null
  dealershipId: string | null
  dayOfWeek: $Enums.DayOfWeek | null
  openTime: string | null
  closeTime: string | null
  isOpen: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkingHourMaxAggregateOutputType = {
  id: string | null
  dealershipId: string | null
  dayOfWeek: $Enums.DayOfWeek | null
  openTime: string | null
  closeTime: string | null
  isOpen: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkingHourCountAggregateOutputType = {
  id: number
  dealershipId: number
  dayOfWeek: number
  openTime: number
  closeTime: number
  isOpen: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WorkingHourMinAggregateInputType = {
  id?: true
  dealershipId?: true
  dayOfWeek?: true
  openTime?: true
  closeTime?: true
  isOpen?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkingHourMaxAggregateInputType = {
  id?: true
  dealershipId?: true
  dayOfWeek?: true
  openTime?: true
  closeTime?: true
  isOpen?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkingHourCountAggregateInputType = {
  id?: true
  dealershipId?: true
  dayOfWeek?: true
  openTime?: true
  closeTime?: true
  isOpen?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WorkingHourAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkingHour to aggregate.
   */
  where?: Prisma.WorkingHourWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkingHours to fetch.
   */
  orderBy?: Prisma.WorkingHourOrderByWithRelationInput | Prisma.WorkingHourOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkingHourWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkingHours from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkingHours.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkingHours
  **/
  _count?: true | WorkingHourCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkingHourMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkingHourMaxAggregateInputType
}

export type GetWorkingHourAggregateType<T extends WorkingHourAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkingHour]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkingHour[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkingHour[P]>
}




export type WorkingHourGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkingHourWhereInput
  orderBy?: Prisma.WorkingHourOrderByWithAggregationInput | Prisma.WorkingHourOrderByWithAggregationInput[]
  by: Prisma.WorkingHourScalarFieldEnum[] | Prisma.WorkingHourScalarFieldEnum
  having?: Prisma.WorkingHourScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkingHourCountAggregateInputType | true
  _min?: WorkingHourMinAggregateInputType
  _max?: WorkingHourMaxAggregateInputType
}

export type WorkingHourGroupByOutputType = {
  id: string
  dealershipId: string
  dayOfWeek: $Enums.DayOfWeek
  openTime: string
  closeTime: string
  isOpen: boolean
  createdAt: Date
  updatedAt: Date
  _count: WorkingHourCountAggregateOutputType | null
  _min: WorkingHourMinAggregateOutputType | null
  _max: WorkingHourMaxAggregateOutputType | null
}

type GetWorkingHourGroupByPayload<T extends WorkingHourGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkingHourGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkingHourGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkingHourGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkingHourGroupByOutputType[P]>
      }
    >
  > 



export type WorkingHourWhereInput = {
  AND?: Prisma.WorkingHourWhereInput | Prisma.WorkingHourWhereInput[]
  OR?: Prisma.WorkingHourWhereInput[]
  NOT?: Prisma.WorkingHourWhereInput | Prisma.WorkingHourWhereInput[]
  id?: Prisma.StringFilter<"WorkingHour"> | string
  dealershipId?: Prisma.StringFilter<"WorkingHour"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekFilter<"WorkingHour"> | $Enums.DayOfWeek
  openTime?: Prisma.StringFilter<"WorkingHour"> | string
  closeTime?: Prisma.StringFilter<"WorkingHour"> | string
  isOpen?: Prisma.BoolFilter<"WorkingHour"> | boolean
  createdAt?: Prisma.DateTimeFilter<"WorkingHour"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkingHour"> | Date | string
  dealership?: Prisma.XOR<Prisma.DealershipInfoScalarRelationFilter, Prisma.DealershipInfoWhereInput>
}

export type WorkingHourOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  dealershipId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  openTime?: Prisma.SortOrder
  closeTime?: Prisma.SortOrder
  isOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dealership?: Prisma.DealershipInfoOrderByWithRelationInput
}

export type WorkingHourWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  dealershipId_dayOfWeek?: Prisma.WorkingHourDealershipIdDayOfWeekCompoundUniqueInput
  AND?: Prisma.WorkingHourWhereInput | Prisma.WorkingHourWhereInput[]
  OR?: Prisma.WorkingHourWhereInput[]
  NOT?: Prisma.WorkingHourWhereInput | Prisma.WorkingHourWhereInput[]
  dealershipId?: Prisma.StringFilter<"WorkingHour"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekFilter<"WorkingHour"> | $Enums.DayOfWeek
  openTime?: Prisma.StringFilter<"WorkingHour"> | string
  closeTime?: Prisma.StringFilter<"WorkingHour"> | string
  isOpen?: Prisma.BoolFilter<"WorkingHour"> | boolean
  createdAt?: Prisma.DateTimeFilter<"WorkingHour"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkingHour"> | Date | string
  dealership?: Prisma.XOR<Prisma.DealershipInfoScalarRelationFilter, Prisma.DealershipInfoWhereInput>
}, "id" | "dealershipId_dayOfWeek">

export type WorkingHourOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  dealershipId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  openTime?: Prisma.SortOrder
  closeTime?: Prisma.SortOrder
  isOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WorkingHourCountOrderByAggregateInput
  _max?: Prisma.WorkingHourMaxOrderByAggregateInput
  _min?: Prisma.WorkingHourMinOrderByAggregateInput
}

export type WorkingHourScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkingHourScalarWhereWithAggregatesInput | Prisma.WorkingHourScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkingHourScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkingHourScalarWhereWithAggregatesInput | Prisma.WorkingHourScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"WorkingHour"> | string
  dealershipId?: Prisma.StringWithAggregatesFilter<"WorkingHour"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekWithAggregatesFilter<"WorkingHour"> | $Enums.DayOfWeek
  openTime?: Prisma.StringWithAggregatesFilter<"WorkingHour"> | string
  closeTime?: Prisma.StringWithAggregatesFilter<"WorkingHour"> | string
  isOpen?: Prisma.BoolWithAggregatesFilter<"WorkingHour"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkingHour"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkingHour"> | Date | string
}

export type WorkingHourCreateInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  openTime: string
  closeTime: string
  isOpen?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  dealership: Prisma.DealershipInfoCreateNestedOneWithoutWorkingHoursInput
}

export type WorkingHourUncheckedCreateInput = {
  id?: string
  dealershipId: string
  dayOfWeek: $Enums.DayOfWeek
  openTime: string
  closeTime: string
  isOpen?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkingHourUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  openTime?: Prisma.StringFieldUpdateOperationsInput | string
  closeTime?: Prisma.StringFieldUpdateOperationsInput | string
  isOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dealership?: Prisma.DealershipInfoUpdateOneRequiredWithoutWorkingHoursNestedInput
}

export type WorkingHourUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dealershipId?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  openTime?: Prisma.StringFieldUpdateOperationsInput | string
  closeTime?: Prisma.StringFieldUpdateOperationsInput | string
  isOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkingHourCreateManyInput = {
  id?: string
  dealershipId: string
  dayOfWeek: $Enums.DayOfWeek
  openTime: string
  closeTime: string
  isOpen?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkingHourUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  openTime?: Prisma.StringFieldUpdateOperationsInput | string
  closeTime?: Prisma.StringFieldUpdateOperationsInput | string
  isOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkingHourUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dealershipId?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  openTime?: Prisma.StringFieldUpdateOperationsInput | string
  closeTime?: Prisma.StringFieldUpdateOperationsInput | string
  isOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkingHourListRelationFilter = {
  every?: Prisma.WorkingHourWhereInput
  some?: Prisma.WorkingHourWhereInput
  none?: Prisma.WorkingHourWhereInput
}

export type WorkingHourOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkingHourDealershipIdDayOfWeekCompoundUniqueInput = {
  dealershipId: string
  dayOfWeek: $Enums.DayOfWeek
}

export type WorkingHourCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dealershipId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  openTime?: Prisma.SortOrder
  closeTime?: Prisma.SortOrder
  isOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkingHourMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dealershipId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  openTime?: Prisma.SortOrder
  closeTime?: Prisma.SortOrder
  isOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkingHourMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dealershipId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  openTime?: Prisma.SortOrder
  closeTime?: Prisma.SortOrder
  isOpen?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkingHourCreateNestedManyWithoutDealershipInput = {
  create?: Prisma.XOR<Prisma.WorkingHourCreateWithoutDealershipInput, Prisma.WorkingHourUncheckedCreateWithoutDealershipInput> | Prisma.WorkingHourCreateWithoutDealershipInput[] | Prisma.WorkingHourUncheckedCreateWithoutDealershipInput[]
  connectOrCreate?: Prisma.WorkingHourCreateOrConnectWithoutDealershipInput | Prisma.WorkingHourCreateOrConnectWithoutDealershipInput[]
  createMany?: Prisma.WorkingHourCreateManyDealershipInputEnvelope
  connect?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
}

export type WorkingHourUncheckedCreateNestedManyWithoutDealershipInput = {
  create?: Prisma.XOR<Prisma.WorkingHourCreateWithoutDealershipInput, Prisma.WorkingHourUncheckedCreateWithoutDealershipInput> | Prisma.WorkingHourCreateWithoutDealershipInput[] | Prisma.WorkingHourUncheckedCreateWithoutDealershipInput[]
  connectOrCreate?: Prisma.WorkingHourCreateOrConnectWithoutDealershipInput | Prisma.WorkingHourCreateOrConnectWithoutDealershipInput[]
  createMany?: Prisma.WorkingHourCreateManyDealershipInputEnvelope
  connect?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
}

export type WorkingHourUpdateManyWithoutDealershipNestedInput = {
  create?: Prisma.XOR<Prisma.WorkingHourCreateWithoutDealershipInput, Prisma.WorkingHourUncheckedCreateWithoutDealershipInput> | Prisma.WorkingHourCreateWithoutDealershipInput[] | Prisma.WorkingHourUncheckedCreateWithoutDealershipInput[]
  connectOrCreate?: Prisma.WorkingHourCreateOrConnectWithoutDealershipInput | Prisma.WorkingHourCreateOrConnectWithoutDealershipInput[]
  upsert?: Prisma.WorkingHourUpsertWithWhereUniqueWithoutDealershipInput | Prisma.WorkingHourUpsertWithWhereUniqueWithoutDealershipInput[]
  createMany?: Prisma.WorkingHourCreateManyDealershipInputEnvelope
  set?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
  disconnect?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
  delete?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
  connect?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
  update?: Prisma.WorkingHourUpdateWithWhereUniqueWithoutDealershipInput | Prisma.WorkingHourUpdateWithWhereUniqueWithoutDealershipInput[]
  updateMany?: Prisma.WorkingHourUpdateManyWithWhereWithoutDealershipInput | Prisma.WorkingHourUpdateManyWithWhereWithoutDealershipInput[]
  deleteMany?: Prisma.WorkingHourScalarWhereInput | Prisma.WorkingHourScalarWhereInput[]
}

export type WorkingHourUncheckedUpdateManyWithoutDealershipNestedInput = {
  create?: Prisma.XOR<Prisma.WorkingHourCreateWithoutDealershipInput, Prisma.WorkingHourUncheckedCreateWithoutDealershipInput> | Prisma.WorkingHourCreateWithoutDealershipInput[] | Prisma.WorkingHourUncheckedCreateWithoutDealershipInput[]
  connectOrCreate?: Prisma.WorkingHourCreateOrConnectWithoutDealershipInput | Prisma.WorkingHourCreateOrConnectWithoutDealershipInput[]
  upsert?: Prisma.WorkingHourUpsertWithWhereUniqueWithoutDealershipInput | Prisma.WorkingHourUpsertWithWhereUniqueWithoutDealershipInput[]
  createMany?: Prisma.WorkingHourCreateManyDealershipInputEnvelope
  set?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
  disconnect?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
  delete?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
  connect?: Prisma.WorkingHourWhereUniqueInput | Prisma.WorkingHourWhereUniqueInput[]
  update?: Prisma.WorkingHourUpdateWithWhereUniqueWithoutDealershipInput | Prisma.WorkingHourUpdateWithWhereUniqueWithoutDealershipInput[]
  updateMany?: Prisma.WorkingHourUpdateManyWithWhereWithoutDealershipInput | Prisma.WorkingHourUpdateManyWithWhereWithoutDealershipInput[]
  deleteMany?: Prisma.WorkingHourScalarWhereInput | Prisma.WorkingHourScalarWhereInput[]
}

export type EnumDayOfWeekFieldUpdateOperationsInput = {
  set?: $Enums.DayOfWeek
}

export type WorkingHourCreateWithoutDealershipInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  openTime: string
  closeTime: string
  isOpen?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkingHourUncheckedCreateWithoutDealershipInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  openTime: string
  closeTime: string
  isOpen?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkingHourCreateOrConnectWithoutDealershipInput = {
  where: Prisma.WorkingHourWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkingHourCreateWithoutDealershipInput, Prisma.WorkingHourUncheckedCreateWithoutDealershipInput>
}

export type WorkingHourCreateManyDealershipInputEnvelope = {
  data: Prisma.WorkingHourCreateManyDealershipInput | Prisma.WorkingHourCreateManyDealershipInput[]
  skipDuplicates?: boolean
}

export type WorkingHourUpsertWithWhereUniqueWithoutDealershipInput = {
  where: Prisma.WorkingHourWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkingHourUpdateWithoutDealershipInput, Prisma.WorkingHourUncheckedUpdateWithoutDealershipInput>
  create: Prisma.XOR<Prisma.WorkingHourCreateWithoutDealershipInput, Prisma.WorkingHourUncheckedCreateWithoutDealershipInput>
}

export type WorkingHourUpdateWithWhereUniqueWithoutDealershipInput = {
  where: Prisma.WorkingHourWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkingHourUpdateWithoutDealershipInput, Prisma.WorkingHourUncheckedUpdateWithoutDealershipInput>
}

export type WorkingHourUpdateManyWithWhereWithoutDealershipInput = {
  where: Prisma.WorkingHourScalarWhereInput
  data: Prisma.XOR<Prisma.WorkingHourUpdateManyMutationInput, Prisma.WorkingHourUncheckedUpdateManyWithoutDealershipInput>
}

export type WorkingHourScalarWhereInput = {
  AND?: Prisma.WorkingHourScalarWhereInput | Prisma.WorkingHourScalarWhereInput[]
  OR?: Prisma.WorkingHourScalarWhereInput[]
  NOT?: Prisma.WorkingHourScalarWhereInput | Prisma.WorkingHourScalarWhereInput[]
  id?: Prisma.StringFilter<"WorkingHour"> | string
  dealershipId?: Prisma.StringFilter<"WorkingHour"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekFilter<"WorkingHour"> | $Enums.DayOfWeek
  openTime?: Prisma.StringFilter<"WorkingHour"> | string
  closeTime?: Prisma.StringFilter<"WorkingHour"> | string
  isOpen?: Prisma.BoolFilter<"WorkingHour"> | boolean
  createdAt?: Prisma.DateTimeFilter<"WorkingHour"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkingHour"> | Date | string
}

export type WorkingHourCreateManyDealershipInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  openTime: string
  closeTime: string
  isOpen?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkingHourUpdateWithoutDealershipInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  openTime?: Prisma.StringFieldUpdateOperationsInput | string
  closeTime?: Prisma.StringFieldUpdateOperationsInput | string
  isOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkingHourUncheckedUpdateWithoutDealershipInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  openTime?: Prisma.StringFieldUpdateOperationsInput | string
  closeTime?: Prisma.StringFieldUpdateOperationsInput | string
  isOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkingHourUncheckedUpdateManyWithoutDealershipInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  openTime?: Prisma.StringFieldUpdateOperationsInput | string
  closeTime?: Prisma.StringFieldUpdateOperationsInput | string
  isOpen?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type WorkingHourSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dealershipId?: boolean
  dayOfWeek?: boolean
  openTime?: boolean
  closeTime?: boolean
  isOpen?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dealership?: boolean | Prisma.DealershipInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workingHour"]>

export type WorkingHourSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dealershipId?: boolean
  dayOfWeek?: boolean
  openTime?: boolean
  closeTime?: boolean
  isOpen?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dealership?: boolean | Prisma.DealershipInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workingHour"]>

export type WorkingHourSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dealershipId?: boolean
  dayOfWeek?: boolean
  openTime?: boolean
  closeTime?: boolean
  isOpen?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dealership?: boolean | Prisma.DealershipInfoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workingHour"]>

export type WorkingHourSelectScalar = {
  id?: boolean
  dealershipId?: boolean
  dayOfWeek?: boolean
  openTime?: boolean
  closeTime?: boolean
  isOpen?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WorkingHourOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "dealershipId" | "dayOfWeek" | "openTime" | "closeTime" | "isOpen" | "createdAt" | "updatedAt", ExtArgs["result"]["workingHour"]>
export type WorkingHourInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dealership?: boolean | Prisma.DealershipInfoDefaultArgs<ExtArgs>
}
export type WorkingHourIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dealership?: boolean | Prisma.DealershipInfoDefaultArgs<ExtArgs>
}
export type WorkingHourIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dealership?: boolean | Prisma.DealershipInfoDefaultArgs<ExtArgs>
}

export type $WorkingHourPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkingHour"
  objects: {
    dealership: Prisma.$DealershipInfoPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    dealershipId: string
    dayOfWeek: $Enums.DayOfWeek
    openTime: string
    closeTime: string
    isOpen: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["workingHour"]>
  composites: {}
}

export type WorkingHourGetPayload<S extends boolean | null | undefined | WorkingHourDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload, S>

export type WorkingHourCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkingHourFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkingHourCountAggregateInputType | true
  }

export interface WorkingHourDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkingHour'], meta: { name: 'WorkingHour' } }
  /**
   * Find zero or one WorkingHour that matches the filter.
   * @param {WorkingHourFindUniqueArgs} args - Arguments to find a WorkingHour
   * @example
   * // Get one WorkingHour
   * const workingHour = await prisma.workingHour.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkingHourFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkingHourFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkingHourClient<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkingHour that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkingHourFindUniqueOrThrowArgs} args - Arguments to find a WorkingHour
   * @example
   * // Get one WorkingHour
   * const workingHour = await prisma.workingHour.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkingHourFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkingHourFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkingHourClient<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkingHour that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkingHourFindFirstArgs} args - Arguments to find a WorkingHour
   * @example
   * // Get one WorkingHour
   * const workingHour = await prisma.workingHour.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkingHourFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkingHourFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkingHourClient<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkingHour that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkingHourFindFirstOrThrowArgs} args - Arguments to find a WorkingHour
   * @example
   * // Get one WorkingHour
   * const workingHour = await prisma.workingHour.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkingHourFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkingHourFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkingHourClient<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkingHours that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkingHourFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkingHours
   * const workingHours = await prisma.workingHour.findMany()
   * 
   * // Get first 10 WorkingHours
   * const workingHours = await prisma.workingHour.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workingHourWithIdOnly = await prisma.workingHour.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkingHourFindManyArgs>(args?: Prisma.SelectSubset<T, WorkingHourFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkingHour.
   * @param {WorkingHourCreateArgs} args - Arguments to create a WorkingHour.
   * @example
   * // Create one WorkingHour
   * const WorkingHour = await prisma.workingHour.create({
   *   data: {
   *     // ... data to create a WorkingHour
   *   }
   * })
   * 
   */
  create<T extends WorkingHourCreateArgs>(args: Prisma.SelectSubset<T, WorkingHourCreateArgs<ExtArgs>>): Prisma.Prisma__WorkingHourClient<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkingHours.
   * @param {WorkingHourCreateManyArgs} args - Arguments to create many WorkingHours.
   * @example
   * // Create many WorkingHours
   * const workingHour = await prisma.workingHour.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkingHourCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkingHourCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkingHours and returns the data saved in the database.
   * @param {WorkingHourCreateManyAndReturnArgs} args - Arguments to create many WorkingHours.
   * @example
   * // Create many WorkingHours
   * const workingHour = await prisma.workingHour.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkingHours and only return the `id`
   * const workingHourWithIdOnly = await prisma.workingHour.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkingHourCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkingHourCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkingHour.
   * @param {WorkingHourDeleteArgs} args - Arguments to delete one WorkingHour.
   * @example
   * // Delete one WorkingHour
   * const WorkingHour = await prisma.workingHour.delete({
   *   where: {
   *     // ... filter to delete one WorkingHour
   *   }
   * })
   * 
   */
  delete<T extends WorkingHourDeleteArgs>(args: Prisma.SelectSubset<T, WorkingHourDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkingHourClient<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkingHour.
   * @param {WorkingHourUpdateArgs} args - Arguments to update one WorkingHour.
   * @example
   * // Update one WorkingHour
   * const workingHour = await prisma.workingHour.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkingHourUpdateArgs>(args: Prisma.SelectSubset<T, WorkingHourUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkingHourClient<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkingHours.
   * @param {WorkingHourDeleteManyArgs} args - Arguments to filter WorkingHours to delete.
   * @example
   * // Delete a few WorkingHours
   * const { count } = await prisma.workingHour.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkingHourDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkingHourDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkingHours.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkingHourUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkingHours
   * const workingHour = await prisma.workingHour.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkingHourUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkingHourUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkingHours and returns the data updated in the database.
   * @param {WorkingHourUpdateManyAndReturnArgs} args - Arguments to update many WorkingHours.
   * @example
   * // Update many WorkingHours
   * const workingHour = await prisma.workingHour.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkingHours and only return the `id`
   * const workingHourWithIdOnly = await prisma.workingHour.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkingHourUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkingHourUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkingHour.
   * @param {WorkingHourUpsertArgs} args - Arguments to update or create a WorkingHour.
   * @example
   * // Update or create a WorkingHour
   * const workingHour = await prisma.workingHour.upsert({
   *   create: {
   *     // ... data to create a WorkingHour
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkingHour we want to update
   *   }
   * })
   */
  upsert<T extends WorkingHourUpsertArgs>(args: Prisma.SelectSubset<T, WorkingHourUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkingHourClient<runtime.Types.Result.GetResult<Prisma.$WorkingHourPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkingHours.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkingHourCountArgs} args - Arguments to filter WorkingHours to count.
   * @example
   * // Count the number of WorkingHours
   * const count = await prisma.workingHour.count({
   *   where: {
   *     // ... the filter for the WorkingHours we want to count
   *   }
   * })
  **/
  count<T extends WorkingHourCountArgs>(
    args?: Prisma.Subset<T, WorkingHourCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkingHourCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkingHour.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkingHourAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkingHourAggregateArgs>(args: Prisma.Subset<T, WorkingHourAggregateArgs>): Prisma.PrismaPromise<GetWorkingHourAggregateType<T>>

  /**
   * Group by WorkingHour.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkingHourGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkingHourGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkingHourGroupByArgs['orderBy'] }
      : { orderBy?: WorkingHourGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkingHourGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkingHourGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkingHour model
 */
readonly fields: WorkingHourFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkingHour.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkingHourClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dealership<T extends Prisma.DealershipInfoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DealershipInfoDefaultArgs<ExtArgs>>): Prisma.Prisma__DealershipInfoClient<runtime.Types.Result.GetResult<Prisma.$DealershipInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkingHour model
 */
export interface WorkingHourFieldRefs {
  readonly id: Prisma.FieldRef<"WorkingHour", 'String'>
  readonly dealershipId: Prisma.FieldRef<"WorkingHour", 'String'>
  readonly dayOfWeek: Prisma.FieldRef<"WorkingHour", 'DayOfWeek'>
  readonly openTime: Prisma.FieldRef<"WorkingHour", 'String'>
  readonly closeTime: Prisma.FieldRef<"WorkingHour", 'String'>
  readonly isOpen: Prisma.FieldRef<"WorkingHour", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"WorkingHour", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkingHour", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WorkingHour findUnique
 */
export type WorkingHourFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  /**
   * Filter, which WorkingHour to fetch.
   */
  where: Prisma.WorkingHourWhereUniqueInput
}

/**
 * WorkingHour findUniqueOrThrow
 */
export type WorkingHourFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  /**
   * Filter, which WorkingHour to fetch.
   */
  where: Prisma.WorkingHourWhereUniqueInput
}

/**
 * WorkingHour findFirst
 */
export type WorkingHourFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  /**
   * Filter, which WorkingHour to fetch.
   */
  where?: Prisma.WorkingHourWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkingHours to fetch.
   */
  orderBy?: Prisma.WorkingHourOrderByWithRelationInput | Prisma.WorkingHourOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkingHours.
   */
  cursor?: Prisma.WorkingHourWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkingHours from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkingHours.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkingHours.
   */
  distinct?: Prisma.WorkingHourScalarFieldEnum | Prisma.WorkingHourScalarFieldEnum[]
}

/**
 * WorkingHour findFirstOrThrow
 */
export type WorkingHourFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  /**
   * Filter, which WorkingHour to fetch.
   */
  where?: Prisma.WorkingHourWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkingHours to fetch.
   */
  orderBy?: Prisma.WorkingHourOrderByWithRelationInput | Prisma.WorkingHourOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkingHours.
   */
  cursor?: Prisma.WorkingHourWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkingHours from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkingHours.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkingHours.
   */
  distinct?: Prisma.WorkingHourScalarFieldEnum | Prisma.WorkingHourScalarFieldEnum[]
}

/**
 * WorkingHour findMany
 */
export type WorkingHourFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  /**
   * Filter, which WorkingHours to fetch.
   */
  where?: Prisma.WorkingHourWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkingHours to fetch.
   */
  orderBy?: Prisma.WorkingHourOrderByWithRelationInput | Prisma.WorkingHourOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkingHours.
   */
  cursor?: Prisma.WorkingHourWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkingHours from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkingHours.
   */
  skip?: number
  distinct?: Prisma.WorkingHourScalarFieldEnum | Prisma.WorkingHourScalarFieldEnum[]
}

/**
 * WorkingHour create
 */
export type WorkingHourCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkingHour.
   */
  data: Prisma.XOR<Prisma.WorkingHourCreateInput, Prisma.WorkingHourUncheckedCreateInput>
}

/**
 * WorkingHour createMany
 */
export type WorkingHourCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkingHours.
   */
  data: Prisma.WorkingHourCreateManyInput | Prisma.WorkingHourCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkingHour createManyAndReturn
 */
export type WorkingHourCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * The data used to create many WorkingHours.
   */
  data: Prisma.WorkingHourCreateManyInput | Prisma.WorkingHourCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkingHour update
 */
export type WorkingHourUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkingHour.
   */
  data: Prisma.XOR<Prisma.WorkingHourUpdateInput, Prisma.WorkingHourUncheckedUpdateInput>
  /**
   * Choose, which WorkingHour to update.
   */
  where: Prisma.WorkingHourWhereUniqueInput
}

/**
 * WorkingHour updateMany
 */
export type WorkingHourUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkingHours.
   */
  data: Prisma.XOR<Prisma.WorkingHourUpdateManyMutationInput, Prisma.WorkingHourUncheckedUpdateManyInput>
  /**
   * Filter which WorkingHours to update
   */
  where?: Prisma.WorkingHourWhereInput
  /**
   * Limit how many WorkingHours to update.
   */
  limit?: number
}

/**
 * WorkingHour updateManyAndReturn
 */
export type WorkingHourUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * The data used to update WorkingHours.
   */
  data: Prisma.XOR<Prisma.WorkingHourUpdateManyMutationInput, Prisma.WorkingHourUncheckedUpdateManyInput>
  /**
   * Filter which WorkingHours to update
   */
  where?: Prisma.WorkingHourWhereInput
  /**
   * Limit how many WorkingHours to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkingHour upsert
 */
export type WorkingHourUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkingHour to update in case it exists.
   */
  where: Prisma.WorkingHourWhereUniqueInput
  /**
   * In case the WorkingHour found by the `where` argument doesn't exist, create a new WorkingHour with this data.
   */
  create: Prisma.XOR<Prisma.WorkingHourCreateInput, Prisma.WorkingHourUncheckedCreateInput>
  /**
   * In case the WorkingHour was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkingHourUpdateInput, Prisma.WorkingHourUncheckedUpdateInput>
}

/**
 * WorkingHour delete
 */
export type WorkingHourDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
  /**
   * Filter which WorkingHour to delete.
   */
  where: Prisma.WorkingHourWhereUniqueInput
}

/**
 * WorkingHour deleteMany
 */
export type WorkingHourDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkingHours to delete
   */
  where?: Prisma.WorkingHourWhereInput
  /**
   * Limit how many WorkingHours to delete.
   */
  limit?: number
}

/**
 * WorkingHour without action
 */
export type WorkingHourDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkingHour
   */
  select?: Prisma.WorkingHourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkingHour
   */
  omit?: Prisma.WorkingHourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkingHourInclude<ExtArgs> | null
}
